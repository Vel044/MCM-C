[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "DBSCAN",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "PCA",
        "importPath": "sklearn.decomposition",
        "description": "sklearn.decomposition",
        "isExtraImport": true,
        "detail": "sklearn.decomposition",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "cross_val_score",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "roc_curve",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "auc",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "classification_report",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "f1_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "roc_curve",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "auc",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "classification_report",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "RandomForestRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "LocalOutlierFactor",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "ProcessPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ProcessPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "normalize_data",
        "kind": 2,
        "importPath": "cleaned_data.cluster",
        "description": "cleaned_data.cluster",
        "peekOfCode": "def normalize_data(df, columns):\n    df_normalized = df.copy()  # 保留原始数据\n    for column in columns:\n        min_val = df[column].min()\n        max_val = df[column].max()\n        df_normalized[column] = (df[column] - min_val) / (max_val - min_val)\n    return df_normalized\ndef cluster1():\n    # 读入数据\n    data = pd.read_csv(\"medals_by_country_year.csv\")  # 假设数据是存储在 medals_data.csv 文件中",
        "detail": "cleaned_data.cluster",
        "documentation": {}
    },
    {
        "label": "cluster1",
        "kind": 2,
        "importPath": "cleaned_data.cluster",
        "description": "cleaned_data.cluster",
        "peekOfCode": "def cluster1():\n    # 读入数据\n    data = pd.read_csv(\"medals_by_country_year.csv\")  # 假设数据是存储在 medals_data.csv 文件中\n    # 选择所有奖牌数据列，排除NOC列\n    medal_columns = [col for col in data.columns if col != 'NOC']\n    # 对数据进行标准化\n    scaler = StandardScaler() # 标准化方法：将数据转换为均值为0，标准差为1的分布\n    scaled_data = scaler.fit_transform(data[medal_columns]) \n    # 查看标准化后的数据\n    print(scaled_data[:5])",
        "detail": "cleaned_data.cluster",
        "documentation": {}
    },
    {
        "label": "cluster2",
        "kind": 2,
        "importPath": "cleaned_data.cluster",
        "description": "cleaned_data.cluster",
        "peekOfCode": "def cluster2():\n    # # 假设你已经加载了CSV文件\n    # data = pd.read_csv('summerOly_medal_counts.csv')\n    # data['NOC']=data['NOC'].str.replace('?','')\n    # # 按照国家和年份对数据进行聚合，得到每年每个国家的奖牌  数\n    # pivot_data = data.pivot_table(index='NOC',  columns='Year', values=['Gold', 'Silver', 'Bronze'], aggfunc='sum', fill_value=0)\n    # # 对列名进行调整，便于后续操作\n    # pivot_data.columns = [f'{col[0]}_{col[1]}' for col  in pivot_data.columns]\n    # pivot_data.to_csv('pivot_data.csv')\n    # # 显示转换后的数据",
        "detail": "cleaned_data.cluster",
        "documentation": {}
    },
    {
        "label": "cluster3",
        "kind": 2,
        "importPath": "cleaned_data.cluster",
        "description": "cleaned_data.cluster",
        "peekOfCode": "def cluster3():\n    df = pd.read_csv(\"grouped_data_归一化.csv\")\n    # 分析每个国家的参赛记录\n    country_count = df['NOC'].value_counts()\n    # print(country_count)\n    # 对每个国家进行分类\n    for country in country_count.index:\n        country_data = df[df['NOC'] == country]\n        classify_country(country_data,categories)\n    # 输出分类结果",
        "detail": "cleaned_data.cluster",
        "documentation": {}
    },
    {
        "label": "classify_teams",
        "kind": 2,
        "importPath": "cleaned_data.cluster",
        "description": "cleaned_data.cluster",
        "peekOfCode": "def classify_teams(row):\n    # 分类1: 近20年没有参赛记录的代表队\n    if row['recent_20_years_count'] == 0:\n        return '没有参赛记录的代表队'\n    # 分类2: 有连续参赛多次记录、成绩稳定的代表队\n    elif row['recent_20_years_count'] >= 5 and row['var_total'] < 5:\n        return '成绩稳定的代表队'\n    # 分类3: 参赛记录多，但排名不稳定的代表队\n    elif row['recent_20_years_count'] > 3 and row['var_total'] >= 5:\n        return '排名不稳定的代表队'",
        "detail": "cleaned_data.cluster",
        "documentation": {}
    },
    {
        "label": "classify_country_1",
        "kind": 2,
        "importPath": "cleaned_data.cluster",
        "description": "cleaned_data.cluster",
        "peekOfCode": "def classify_country_1(country_data, categories):\n    # print(country_data)\n    country = country_data['NOC'].iloc[0]\n    # 获取参赛年份并计算最近10年的参赛记录\n    recent_years = country_data[country_data['Year'] >= (country_data['Year'].max() - 10)]\n    recent_count = len(recent_years)\n    # print(recent_count)\n    # 计算奖牌数量和排名的标准差\n    total_medals = country_data['Gold'] + country_data['Silver'] + country_data['Bronze']\n    rank_std = np.std(total_medals)",
        "detail": "cleaned_data.cluster",
        "documentation": {}
    },
    {
        "label": "calculate_statistics",
        "kind": 2,
        "importPath": "cleaned_data.cluster",
        "description": "cleaned_data.cluster",
        "peekOfCode": "def calculate_statistics():\n    df = pd.read_csv(\"summerOly_medal_counts.csv\")\n    # 归一化\n    columns_to_normalize = ['Gold', 'Silver', 'Bronze', 'Total']\n    df_normalized = normalize_data(df, columns_to_normalize)\n    # 获取每个国家的分组数据\n    grouped = df.groupby('NOC').agg(\n        avg_gold=('Gold', 'mean'),\n        avg_silver=('Silver', 'mean'),\n        avg_bronze=('Bronze', 'mean'),",
        "detail": "cleaned_data.cluster",
        "documentation": {}
    },
    {
        "label": "categories",
        "kind": 5,
        "importPath": "cleaned_data.cluster",
        "description": "cleaned_data.cluster",
        "peekOfCode": "categories = {\n    '近几年没有参赛记录的代表队': [],\n    '有连续参赛多次记录、成绩稳定的代表队': [],\n    '参赛记录多，但排名不稳定': [],\n    '近年来刚开始参赛的代表队': [],\n    '特殊的：从未获得奖牌的国家': []\n}\nimport json\nif __name__ == '__main__':\n    os.chdir(r\"C:\\Users\\xuwen\\Desktop\\MCM-C\\cleaned_data\")",
        "detail": "cleaned_data.cluster",
        "documentation": {}
    },
    {
        "label": "detect_missing_value",
        "kind": 2,
        "importPath": "cleaned_data.data_clean",
        "description": "cleaned_data.data_clean",
        "peekOfCode": "def detect_missing_value(file_name:str):\n    # 读取 CSV 文件\n    df = pd.read_csv(file_name)\n    # 检查每列的缺失值\n    missing_values = df.isnull().sum()\n    # 输出每列缺失值的数量\n    print(\"Missing value detection results:\")\n    print(missing_values)\n# 每个NOC对应的不同Team的数量\ndef delete_team(file_name: str):",
        "detail": "cleaned_data.data_clean",
        "documentation": {}
    },
    {
        "label": "delete_team",
        "kind": 2,
        "importPath": "cleaned_data.data_clean",
        "description": "cleaned_data.data_clean",
        "peekOfCode": "def delete_team(file_name: str):\n    # 读取CSV文件\n    df = pd.read_csv(file_name)\n    # 按NOC分组，统计每个NOC对应的不同Team数量\n    result = df.groupby(\"NOC\")[\"Team\"].nunique().reset_index()\n    # 修改列名\n    result.columns = [\"NOC\", \"Unique Team Count\"]\n    # 如果需要将结果保存为新CSV文件\n    result.to_csv('team_noc_count.csv', index=False)\n    print(result.head(10))",
        "detail": "cleaned_data.data_clean",
        "documentation": {}
    },
    {
        "label": "padel_num_by_NOC",
        "kind": 2,
        "importPath": "cleaned_data.data_clean",
        "description": "cleaned_data.data_clean",
        "peekOfCode": "def padel_num_by_NOC():\n    df = pd.read_csv(\"summerOly_medal_counts.csv\")\n    # 按国家和年份分组，计算奖牌总数\n    grouped = df.groupby(['NOC', 'Year']).agg({'Total': 'sum'}).reset_index()\n    # 绘制每个国家的奖牌总数趋势\n    plt.figure(figsize=(16, 12))\n    # 统计每个国家的出现次数\n    country_counts = grouped['NOC'].value_counts()\n    # 筛选出现次数大于等于10次的国家\n    countries = country_counts[country_counts >= 20].index",
        "detail": "cleaned_data.data_clean",
        "documentation": {}
    },
    {
        "label": "medals_by_country_year",
        "kind": 2,
        "importPath": "cleaned_data.data_clean",
        "description": "cleaned_data.data_clean",
        "peekOfCode": "def medals_by_country_year():\n    # 创建DataFrame\n    columns = ['Name', 'Sex', 'NOC', 'Year', 'City', 'Sport', 'Event', 'Medal']\n    df = pd.read_csv(\"summerOly_athletes.csv\")\n    # 创建新列，标记金、银、铜奖牌\n    df['Gold'] = df['Medal'].apply(lambda x: 1 if x == 'Gold' else 0)\n    df['Silver'] = df['Medal'].apply(lambda x: 1 if x == 'Silver' else 0)\n    df['Bronze'] = df['Medal'].apply(lambda x: 1 if x == 'Bronze' else 0)\n    # 按照国家（NOC）和年份（Year）分组，并计算每个奖牌的数量\n    grouped = df.groupby(['NOC', 'Year'])[['Gold', 'Silver', 'Bronze']].sum().reset_index()",
        "detail": "cleaned_data.data_clean",
        "documentation": {}
    },
    {
        "label": "build_model",
        "kind": 2,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "def build_model(data, features, target):\n    X = data[features]\n    y = data[target]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    mse = mean_squared_error(y_test, y_pred)\n    print(f'Model for {target}: MSE = {mse}')\n    return model",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "athletes",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "athletes = pd.read_csv('summerOly_athletes.csv', encoding='ISO-8859-1')\nmedal_counts = pd.read_csv('summerOly_medal_counts.csv', encoding='ISO-8859-1')\n# 数据预处理\n# 1. 奖牌数据：按国家和年份汇总\nmedal_summary = medal_counts.groupby(['Year', 'NOC']).agg(\n    {'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum', 'Total': 'sum'}).reset_index()\n# 2. 运动员数据：按国家和年份汇总参赛人数\nathlete_summary = athletes.groupby(['Year', 'NOC']).size().reset_index(name='Athletes')\n# 3. 合并数据\ndata = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "medal_counts",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "medal_counts = pd.read_csv('summerOly_medal_counts.csv', encoding='ISO-8859-1')\n# 数据预处理\n# 1. 奖牌数据：按国家和年份汇总\nmedal_summary = medal_counts.groupby(['Year', 'NOC']).agg(\n    {'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum', 'Total': 'sum'}).reset_index()\n# 2. 运动员数据：按国家和年份汇总参赛人数\nathlete_summary = athletes.groupby(['Year', 'NOC']).size().reset_index(name='Athletes')\n# 3. 合并数据\ndata = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')\ndata = data.fillna(0)  # 填充缺失值",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "medal_summary",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "medal_summary = medal_counts.groupby(['Year', 'NOC']).agg(\n    {'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum', 'Total': 'sum'}).reset_index()\n# 2. 运动员数据：按国家和年份汇总参赛人数\nathlete_summary = athletes.groupby(['Year', 'NOC']).size().reset_index(name='Athletes')\n# 3. 合并数据\ndata = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')\ndata = data.fillna(0)  # 填充缺失值\n# 4. 添加历史奖牌特征\n# 计算每个国家过去3届奥运会的平均奖牌数和总奖牌数\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "athlete_summary",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "athlete_summary = athletes.groupby(['Year', 'NOC']).size().reset_index(name='Athletes')\n# 3. 合并数据\ndata = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')\ndata = data.fillna(0)  # 填充缺失值\n# 4. 添加历史奖牌特征\n# 计算每个国家过去3届奥运会的平均奖牌数和总奖牌数\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "data = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')\ndata = data.fillna(0)  # 填充缺失值\n# 4. 添加历史奖牌特征\n# 计算每个国家过去3届奥运会的平均奖牌数和总奖牌数\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "data = data.fillna(0)  # 填充缺失值\n# 4. 添加历史奖牌特征\n# 计算每个国家过去3届奥运会的平均奖牌数和总奖牌数\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "data['Past_Gold_Avg']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "data['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\n# 填充历史特征的缺失值（对于早期数据）\ndata[['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']] = data[",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "data['Past_Total_Avg']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "data['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\n# 填充历史特征的缺失值（对于早期数据）\ndata[['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']] = data[\n    ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']].fillna(0)\nfeatures = ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "data['Past_Gold_Sum']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "data['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\n# 填充历史特征的缺失值（对于早期数据）\ndata[['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']] = data[\n    ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']].fillna(0)\nfeatures = ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']\ntarget_gold = 'Gold'\ntarget_total = 'Total'",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "data['Past_Total_Sum']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "data['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\n# 填充历史特征的缺失值（对于早期数据）\ndata[['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']] = data[\n    ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']].fillna(0)\nfeatures = ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']\ntarget_gold = 'Gold'\ntarget_total = 'Total'\n# 构建模型\ndef build_model(data, features, target):",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "features",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "features = ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']\ntarget_gold = 'Gold'\ntarget_total = 'Total'\n# 构建模型\ndef build_model(data, features, target):\n    X = data[features]\n    y = data[target]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = LinearRegression()\n    model.fit(X_train, y_train)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "target_gold",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "target_gold = 'Gold'\ntarget_total = 'Total'\n# 构建模型\ndef build_model(data, features, target):\n    X = data[features]\n    y = data[target]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "target_total",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "target_total = 'Total'\n# 构建模型\ndef build_model(data, features, target):\n    X = data[features]\n    y = data[target]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    mse = mean_squared_error(y_test, y_pred)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "model_gold",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "model_gold = build_model(data, features, target_gold)\nmodel_total = build_model(data, features, target_total)\n# 准备2028年的数据\nunique_nocs = data['NOC'].unique()\nfuture_data = pd.DataFrame({\n    'NOC': unique_nocs,\n    'Past_Gold_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "model_total",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "model_total = build_model(data, features, target_total)\n# 准备2028年的数据\nunique_nocs = data['NOC'].unique()\nfuture_data = pd.DataFrame({\n    'NOC': unique_nocs,\n    'Past_Gold_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Gold_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Sum'].mean().reindex(unique_nocs).fillna(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "unique_nocs",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "unique_nocs = data['NOC'].unique()\nfuture_data = pd.DataFrame({\n    'NOC': unique_nocs,\n    'Past_Gold_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Gold_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Sum'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Sum'].mean().reindex(unique_nocs).fillna(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "future_data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "future_data = pd.DataFrame({\n    'NOC': unique_nocs,\n    'Past_Gold_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Gold_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Sum'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Sum'].mean().reindex(unique_nocs).fillna(\n        0).values",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "future_data['Predicted_Gold']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "future_data['Predicted_Gold'] = model_gold.predict(future_data[features])\nfuture_data['Predicted_Total'] = model_total.predict(future_data[features])\n# 确保预测结果为非负整数\nfuture_data['Predicted_Gold'] = future_data['Predicted_Gold'].clip(lower=0).round().astype(int)\nfuture_data['Predicted_Total'] = future_data['Predicted_Total'].clip(lower=0).round().astype(int)\ngold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "future_data['Predicted_Total']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "future_data['Predicted_Total'] = model_total.predict(future_data[features])\n# 确保预测结果为非负整数\nfuture_data['Predicted_Gold'] = future_data['Predicted_Gold'].clip(lower=0).round().astype(int)\nfuture_data['Predicted_Total'] = future_data['Predicted_Total'].clip(lower=0).round().astype(int)\ngold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "future_data['Predicted_Gold']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "future_data['Predicted_Gold'] = future_data['Predicted_Gold'].clip(lower=0).round().astype(int)\nfuture_data['Predicted_Total'] = future_data['Predicted_Total'].clip(lower=0).round().astype(int)\ngold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "future_data['Predicted_Total']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "future_data['Predicted_Total'] = future_data['Predicted_Total'].clip(lower=0).round().astype(int)\ngold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "gold_std",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "gold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "total_std",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "total_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "future_data['Gold_Lower']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "future_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "future_data['Gold_Upper']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "future_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件\nfuture_data.to_csv('Predicted_Medal_Table_2028.csv', index=False)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "future_data['Total_Lower']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "future_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件\nfuture_data.to_csv('Predicted_Medal_Table_2028.csv', index=False)\nprint(\"Results saved to 'Predicted_Medal_Table_2028.csv'\")",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "future_data['Total_Upper']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "future_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件\nfuture_data.to_csv('Predicted_Medal_Table_2028.csv', index=False)\nprint(\"Results saved to 'Predicted_Medal_Table_2028.csv'\")\n# 可视化预测的奖牌榜",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "future_data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "peekOfCode": "future_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件\nfuture_data.to_csv('Predicted_Medal_Table_2028.csv', index=False)\nprint(\"Results saved to 'Predicted_Medal_Table_2028.csv'\")\n# 可视化预测的奖牌榜\nplt.figure(figsize=(12, 8))\nsns.barplot(x='Predicted_Total', y='NOC', data=future_data.head(10), palette='viridis')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-1奖牌预测",
        "documentation": {}
    },
    {
        "label": "build_model",
        "kind": 2,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "def build_model(data, features, target):\n    X = data[features]\n    y = data[target]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    # 使用随机森林回归模型\n    model = RandomForestRegressor(n_estimators=100, random_state=42)\n    model.fit(X_train, y_train)\n    # 预测与评估\n    y_pred = model.predict(X_test)\n    mse = mean_squared_error(y_test, y_pred)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "athletes",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "athletes = pd.read_csv('summerOly_athletes.csv', encoding='ISO-8859-1')\nmedal_counts = pd.read_csv('summerOly_medal_counts.csv', encoding='ISO-8859-1')\n# 数据预处理\nmedal_summary = medal_counts.groupby(['Year', 'NOC']).agg(\n    {'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum', 'Total': 'sum'}).reset_index()\nathlete_summary = athletes.groupby(['Year', 'NOC']).size().reset_index(name='Athletes')\n# 合并数据\ndata = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')\ndata = data.fillna(0)  # 填充缺失值\n# 计算历史奖牌特征",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "medal_counts",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "medal_counts = pd.read_csv('summerOly_medal_counts.csv', encoding='ISO-8859-1')\n# 数据预处理\nmedal_summary = medal_counts.groupby(['Year', 'NOC']).agg(\n    {'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum', 'Total': 'sum'}).reset_index()\nathlete_summary = athletes.groupby(['Year', 'NOC']).size().reset_index(name='Athletes')\n# 合并数据\ndata = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')\ndata = data.fillna(0)  # 填充缺失值\n# 计算历史奖牌特征\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "medal_summary",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "medal_summary = medal_counts.groupby(['Year', 'NOC']).agg(\n    {'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum', 'Total': 'sum'}).reset_index()\nathlete_summary = athletes.groupby(['Year', 'NOC']).size().reset_index(name='Athletes')\n# 合并数据\ndata = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')\ndata = data.fillna(0)  # 填充缺失值\n# 计算历史奖牌特征\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "athlete_summary",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "athlete_summary = athletes.groupby(['Year', 'NOC']).size().reset_index(name='Athletes')\n# 合并数据\ndata = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')\ndata = data.fillna(0)  # 填充缺失值\n# 计算历史奖牌特征\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "data = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')\ndata = data.fillna(0)  # 填充缺失值\n# 计算历史奖牌特征\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "data = data.fillna(0)  # 填充缺失值\n# 计算历史奖牌特征\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "data['Past_Gold_Avg']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "data['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\n# 填充历史特征的缺失值\ndata[['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']] = data[",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "data['Past_Total_Avg']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "data['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\n# 填充历史特征的缺失值\ndata[['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']] = data[\n    ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']].fillna(0)\n# 特征选择（移除 'Time' 和 'Athletes'）",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "data['Past_Gold_Sum']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "data['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\n# 填充历史特征的缺失值\ndata[['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']] = data[\n    ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']].fillna(0)\n# 特征选择（移除 'Time' 和 'Athletes'）\nfeatures = ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']\ntarget_gold = 'Gold'",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "data['Past_Total_Sum']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "data['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\n# 填充历史特征的缺失值\ndata[['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']] = data[\n    ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']].fillna(0)\n# 特征选择（移除 'Time' 和 'Athletes'）\nfeatures = ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']\ntarget_gold = 'Gold'\ntarget_total = 'Total'\n# 数据标准化",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "features",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "features = ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']\ntarget_gold = 'Gold'\ntarget_total = 'Total'\n# 数据标准化\nscaler = StandardScaler()\ndata[features] = scaler.fit_transform(data[features])\n# 构建随机森林回归模型\ndef build_model(data, features, target):\n    X = data[features]\n    y = data[target]",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "target_gold",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "target_gold = 'Gold'\ntarget_total = 'Total'\n# 数据标准化\nscaler = StandardScaler()\ndata[features] = scaler.fit_transform(data[features])\n# 构建随机森林回归模型\ndef build_model(data, features, target):\n    X = data[features]\n    y = data[target]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "target_total",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "target_total = 'Total'\n# 数据标准化\nscaler = StandardScaler()\ndata[features] = scaler.fit_transform(data[features])\n# 构建随机森林回归模型\ndef build_model(data, features, target):\n    X = data[features]\n    y = data[target]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    # 使用随机森林回归模型",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "scaler",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "scaler = StandardScaler()\ndata[features] = scaler.fit_transform(data[features])\n# 构建随机森林回归模型\ndef build_model(data, features, target):\n    X = data[features]\n    y = data[target]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    # 使用随机森林回归模型\n    model = RandomForestRegressor(n_estimators=100, random_state=42)\n    model.fit(X_train, y_train)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "data[features]",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "data[features] = scaler.fit_transform(data[features])\n# 构建随机森林回归模型\ndef build_model(data, features, target):\n    X = data[features]\n    y = data[target]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    # 使用随机森林回归模型\n    model = RandomForestRegressor(n_estimators=100, random_state=42)\n    model.fit(X_train, y_train)\n    # 预测与评估",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "model_gold",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "model_gold = build_model(data, features, target_gold)\nmodel_total = build_model(data, features, target_total)\n# 预测2028年的数据\nunique_nocs = data['NOC'].unique()\nfuture_data = pd.DataFrame({\n    'NOC': unique_nocs,\n    'Past_Gold_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "model_total",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "model_total = build_model(data, features, target_total)\n# 预测2028年的数据\nunique_nocs = data['NOC'].unique()\nfuture_data = pd.DataFrame({\n    'NOC': unique_nocs,\n    'Past_Gold_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Gold_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Sum'].mean().reindex(unique_nocs).fillna(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "unique_nocs",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "unique_nocs = data['NOC'].unique()\nfuture_data = pd.DataFrame({\n    'NOC': unique_nocs,\n    'Past_Gold_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Gold_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Sum'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Sum'].mean().reindex(unique_nocs).fillna(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "future_data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "future_data = pd.DataFrame({\n    'NOC': unique_nocs,\n    'Past_Gold_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Gold_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Sum'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Sum'].mean().reindex(unique_nocs).fillna(\n        0).values",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "future_data[features]",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "future_data[features] = scaler.transform(future_data[features])\n# 预测奖牌数\nfuture_data['Predicted_Gold'] = model_gold.predict(future_data[features])\nfuture_data['Predicted_Total'] = model_total.predict(future_data[features])\n# 确保预测结果为非负整数\nfuture_data['Predicted_Gold'] = future_data['Predicted_Gold'].clip(lower=0).round().astype(int)\nfuture_data['Predicted_Total'] = future_data['Predicted_Total'].clip(lower=0).round().astype(int)\n# 添加预测区间（简单假设为标准差的两倍）\ngold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "future_data['Predicted_Gold']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "future_data['Predicted_Gold'] = model_gold.predict(future_data[features])\nfuture_data['Predicted_Total'] = model_total.predict(future_data[features])\n# 确保预测结果为非负整数\nfuture_data['Predicted_Gold'] = future_data['Predicted_Gold'].clip(lower=0).round().astype(int)\nfuture_data['Predicted_Total'] = future_data['Predicted_Total'].clip(lower=0).round().astype(int)\n# 添加预测区间（简单假设为标准差的两倍）\ngold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "future_data['Predicted_Total']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "future_data['Predicted_Total'] = model_total.predict(future_data[features])\n# 确保预测结果为非负整数\nfuture_data['Predicted_Gold'] = future_data['Predicted_Gold'].clip(lower=0).round().astype(int)\nfuture_data['Predicted_Total'] = future_data['Predicted_Total'].clip(lower=0).round().astype(int)\n# 添加预测区间（简单假设为标准差的两倍）\ngold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "future_data['Predicted_Gold']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "future_data['Predicted_Gold'] = future_data['Predicted_Gold'].clip(lower=0).round().astype(int)\nfuture_data['Predicted_Total'] = future_data['Predicted_Total'].clip(lower=0).round().astype(int)\n# 添加预测区间（简单假设为标准差的两倍）\ngold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "future_data['Predicted_Total']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "future_data['Predicted_Total'] = future_data['Predicted_Total'].clip(lower=0).round().astype(int)\n# 添加预测区间（简单假设为标准差的两倍）\ngold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "gold_std",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "gold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "total_std",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "total_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "future_data['Gold_Lower']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "future_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "future_data['Gold_Upper']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "future_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件\nfuture_data.to_csv('Predicted_Medal_Table_2028.csv', index=False)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "future_data['Total_Lower']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "future_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件\nfuture_data.to_csv('Predicted_Medal_Table_2028.csv', index=False)\nprint(\"Results saved to 'Predicted_Medal_Table_2028.csv'\")",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "future_data['Total_Upper']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "future_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件\nfuture_data.to_csv('Predicted_Medal_Table_2028.csv', index=False)\nprint(\"Results saved to 'Predicted_Medal_Table_2028.csv'\")\n# 可视化预测的奖牌榜",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "future_data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "peekOfCode": "future_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件\nfuture_data.to_csv('Predicted_Medal_Table_2028.csv', index=False)\nprint(\"Results saved to 'Predicted_Medal_Table_2028.csv'\")\n# 可视化预测的奖牌榜\nplt.figure(figsize=(12, 8))\nsns.barplot(x='Predicted_Total', y='NOC', data=future_data.head(10), palette='viridis')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.1-2测试版（不建议使用）",
        "documentation": {}
    },
    {
        "label": "build_model",
        "kind": 2,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "def build_model(data, features, target):\n    X = data[features]\n    y = data[target]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    mse = mean_squared_error(y_test, y_pred)\n    print(f'Model for {target}: MSE = {mse}')\n    return model",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "athletes",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "athletes = pd.read_csv('summerOly_athletes.csv', encoding='ISO-8859-1')\nmedal_counts = pd.read_csv('summerOly_medal_counts.csv', encoding='ISO-8859-1')\nmedal_summary = medal_counts.groupby(['Year', 'NOC']).agg(\n    {'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum', 'Total': 'sum'}).reset_index()\nathlete_summary = athletes.groupby(['Year', 'NOC']).size().reset_index(name='Athletes')\ndata = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')\ndata = data.fillna(0)\n# 4. 添加历史奖牌特征\n# 计算每个国家过去3届奥运会的平均奖牌数和总奖牌数\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "medal_counts",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "medal_counts = pd.read_csv('summerOly_medal_counts.csv', encoding='ISO-8859-1')\nmedal_summary = medal_counts.groupby(['Year', 'NOC']).agg(\n    {'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum', 'Total': 'sum'}).reset_index()\nathlete_summary = athletes.groupby(['Year', 'NOC']).size().reset_index(name='Athletes')\ndata = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')\ndata = data.fillna(0)\n# 4. 添加历史奖牌特征\n# 计算每个国家过去3届奥运会的平均奖牌数和总奖牌数\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "medal_summary",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "medal_summary = medal_counts.groupby(['Year', 'NOC']).agg(\n    {'Gold': 'sum', 'Silver': 'sum', 'Bronze': 'sum', 'Total': 'sum'}).reset_index()\nathlete_summary = athletes.groupby(['Year', 'NOC']).size().reset_index(name='Athletes')\ndata = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')\ndata = data.fillna(0)\n# 4. 添加历史奖牌特征\n# 计算每个国家过去3届奥运会的平均奖牌数和总奖牌数\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "athlete_summary",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "athlete_summary = athletes.groupby(['Year', 'NOC']).size().reset_index(name='Athletes')\ndata = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')\ndata = data.fillna(0)\n# 4. 添加历史奖牌特征\n# 计算每个国家过去3届奥运会的平均奖牌数和总奖牌数\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "data = pd.merge(medal_summary, athlete_summary, on=['Year', 'NOC'], how='left')\ndata = data.fillna(0)\n# 4. 添加历史奖牌特征\n# 计算每个国家过去3届奥运会的平均奖牌数和总奖牌数\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "data = data.fillna(0)\n# 4. 添加历史奖牌特征\n# 计算每个国家过去3届奥运会的平均奖牌数和总奖牌数\ndata['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "data['Past_Gold_Avg']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "data['Past_Gold_Avg'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata[['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']] = data[[\n    'Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']].fillna(0)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "data['Past_Total_Avg']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "data['Past_Total_Avg'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).mean())\ndata['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata[['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']] = data[[\n    'Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']].fillna(0)\nfeatures = ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']\ntarget_gold = 'Gold'",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "data['Past_Gold_Sum']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "data['Past_Gold_Sum'] = data.groupby('NOC')['Gold'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata[['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']] = data[[\n    'Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']].fillna(0)\nfeatures = ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']\ntarget_gold = 'Gold'\ntarget_total = 'Total'\n# 构建模型",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "data['Past_Total_Sum']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "data['Past_Total_Sum'] = data.groupby('NOC')['Total'].transform(\n    lambda x: x.shift().rolling(window=3, min_periods=1).sum())\ndata[['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']] = data[[\n    'Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']].fillna(0)\nfeatures = ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']\ntarget_gold = 'Gold'\ntarget_total = 'Total'\n# 构建模型\ndef build_model(data, features, target):\n    X = data[features]",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "features",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "features = ['Past_Gold_Avg', 'Past_Total_Avg', 'Past_Gold_Sum', 'Past_Total_Sum']\ntarget_gold = 'Gold'\ntarget_total = 'Total'\n# 构建模型\ndef build_model(data, features, target):\n    X = data[features]\n    y = data[target]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = LinearRegression()\n    model.fit(X_train, y_train)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "target_gold",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "target_gold = 'Gold'\ntarget_total = 'Total'\n# 构建模型\ndef build_model(data, features, target):\n    X = data[features]\n    y = data[target]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "target_total",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "target_total = 'Total'\n# 构建模型\ndef build_model(data, features, target):\n    X = data[features]\n    y = data[target]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    mse = mean_squared_error(y_test, y_pred)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "model_gold",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "model_gold = build_model(data, features, target_gold)\nmodel_total = build_model(data, features, target_total)\n# 准备2028年的数据\nunique_nocs = data['NOC'].unique()\nfuture_data = pd.DataFrame({\n    'NOC': unique_nocs,\n    'Past_Gold_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "model_total",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "model_total = build_model(data, features, target_total)\n# 准备2028年的数据\nunique_nocs = data['NOC'].unique()\nfuture_data = pd.DataFrame({\n    'NOC': unique_nocs,\n    'Past_Gold_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Gold_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Sum'].mean().reindex(unique_nocs).fillna(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "unique_nocs",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "unique_nocs = data['NOC'].unique()\nfuture_data = pd.DataFrame({\n    'NOC': unique_nocs,\n    'Past_Gold_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Gold_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Sum'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Sum'].mean().reindex(unique_nocs).fillna(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data = pd.DataFrame({\n    'NOC': unique_nocs,\n    'Past_Gold_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Avg': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Avg'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Gold_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Gold_Sum'].mean().reindex(unique_nocs).fillna(\n        0).values,\n    'Past_Total_Sum': data[data['Year'] == 2024].groupby('NOC')['Past_Total_Sum'].mean().reindex(unique_nocs).fillna(\n        0).values",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data['Predicted_Gold']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data['Predicted_Gold'] = model_gold.predict(future_data[features])\nfuture_data['Predicted_Total'] = model_total.predict(future_data[features])\nfuture_data['Predicted_Gold'] = future_data['Predicted_Gold'].clip(lower=0).round().astype(int)\nfuture_data['Predicted_Total'] = future_data['Predicted_Total'].clip(lower=0).round().astype(int)\ngold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data['Predicted_Total']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data['Predicted_Total'] = model_total.predict(future_data[features])\nfuture_data['Predicted_Gold'] = future_data['Predicted_Gold'].clip(lower=0).round().astype(int)\nfuture_data['Predicted_Total'] = future_data['Predicted_Total'].clip(lower=0).round().astype(int)\ngold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data['Predicted_Gold']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data['Predicted_Gold'] = future_data['Predicted_Gold'].clip(lower=0).round().astype(int)\nfuture_data['Predicted_Total'] = future_data['Predicted_Total'].clip(lower=0).round().astype(int)\ngold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data['Predicted_Total']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data['Predicted_Total'] = future_data['Predicted_Total'].clip(lower=0).round().astype(int)\ngold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "gold_std",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "gold_std = np.std(model_gold.predict(data[features]) - data[target_gold])\ntotal_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "total_std",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "total_std = np.std(model_total.predict(data[features]) - data[target_total])\n# 确保预测区间为非负整数\nfuture_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data['Gold_Lower']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data['Gold_Lower'] = np.ceil(future_data['Predicted_Gold'] - 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data['Gold_Upper']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data['Gold_Upper'] = np.floor(future_data['Predicted_Gold'] + 2 * gold_std).clip(lower=0).astype(int)\nfuture_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件\nfuture_data.to_csv('Predicted_Medal_Table_2028.csv', index=False)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data['Total_Lower']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data['Total_Lower'] = np.ceil(future_data['Predicted_Total'] - 2 * total_std).clip(lower=0).astype(int)\nfuture_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件\nfuture_data.to_csv('Predicted_Medal_Table_2028.csv', index=False)\nprint(\"Results saved to 'Predicted_Medal_Table_2028.csv'\")",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data['Total_Upper']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data['Total_Upper'] = np.floor(future_data['Predicted_Total'] + 2 * total_std).clip(lower=0).astype(int)\n# 输出预测结果\nfuture_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件\nfuture_data.to_csv('Predicted_Medal_Table_2028.csv', index=False)\nprint(\"Results saved to 'Predicted_Medal_Table_2028.csv'\")\n# 可视化预测的奖牌榜",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data = future_data.sort_values(by='Predicted_Total', ascending=False)\nprint(\"Predicted Medal Table for 2028 Los Angeles Olympics:\")\nprint(\n    future_data[['NOC', 'Predicted_Gold', 'Gold_Lower', 'Gold_Upper', 'Predicted_Total', 'Total_Lower', 'Total_Upper']])\n# 保存结果到CSV文件\nfuture_data.to_csv('Predicted_Medal_Table_2028.csv', index=False)\nprint(\"Results saved to 'Predicted_Medal_Table_2028.csv'\")\n# 可视化预测的奖牌榜\nplt.figure(figsize=(12, 8))\nsns.barplot(x='Predicted_Total', y='NOC', data=future_data.head(10), palette='viridis')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data['Gold_History_Avg']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data['Gold_History_Avg'] = data.groupby('NOC')['Past_Gold_Avg'].mean().reindex(unique_nocs).fillna(0).values\nfuture_data['Total_History_Avg'] = data.groupby('NOC')['Past_Total_Avg'].mean().reindex(unique_nocs).fillna(0).values\n# 计算进步/退步\nfuture_data['Gold_Progress'] = future_data['Predicted_Gold'] - future_data['Gold_History_Avg']\nfuture_data['Total_Progress'] = future_data['Predicted_Total'] - future_data['Total_History_Avg']\n# 标记进步和退步的国家\nfuture_data['Gold_Trend'] = np.where(future_data['Gold_Progress'] > 0, 'Progress', 'Decline')\nfuture_data['Total_Trend'] = np.where(future_data['Total_Progress'] > 0, 'Progress', 'Decline')\n# 按照金牌数的进步排序\nprogress_gold = future_data[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].sort_values(by='Gold_Progress', ascending=False)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data['Total_History_Avg']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data['Total_History_Avg'] = data.groupby('NOC')['Past_Total_Avg'].mean().reindex(unique_nocs).fillna(0).values\n# 计算进步/退步\nfuture_data['Gold_Progress'] = future_data['Predicted_Gold'] - future_data['Gold_History_Avg']\nfuture_data['Total_Progress'] = future_data['Predicted_Total'] - future_data['Total_History_Avg']\n# 标记进步和退步的国家\nfuture_data['Gold_Trend'] = np.where(future_data['Gold_Progress'] > 0, 'Progress', 'Decline')\nfuture_data['Total_Trend'] = np.where(future_data['Total_Progress'] > 0, 'Progress', 'Decline')\n# 按照金牌数的进步排序\nprogress_gold = future_data[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].sort_values(by='Gold_Progress', ascending=False)\ndecline_gold = future_data[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].sort_values(by='Gold_Progress', ascending=True)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data['Gold_Progress']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data['Gold_Progress'] = future_data['Predicted_Gold'] - future_data['Gold_History_Avg']\nfuture_data['Total_Progress'] = future_data['Predicted_Total'] - future_data['Total_History_Avg']\n# 标记进步和退步的国家\nfuture_data['Gold_Trend'] = np.where(future_data['Gold_Progress'] > 0, 'Progress', 'Decline')\nfuture_data['Total_Trend'] = np.where(future_data['Total_Progress'] > 0, 'Progress', 'Decline')\n# 按照金牌数的进步排序\nprogress_gold = future_data[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].sort_values(by='Gold_Progress', ascending=False)\ndecline_gold = future_data[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].sort_values(by='Gold_Progress', ascending=True)\n# 按照总奖牌数的进步排序\nprogress_total = future_data[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].sort_values(by='Total_Progress', ascending=False)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data['Total_Progress']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data['Total_Progress'] = future_data['Predicted_Total'] - future_data['Total_History_Avg']\n# 标记进步和退步的国家\nfuture_data['Gold_Trend'] = np.where(future_data['Gold_Progress'] > 0, 'Progress', 'Decline')\nfuture_data['Total_Trend'] = np.where(future_data['Total_Progress'] > 0, 'Progress', 'Decline')\n# 按照金牌数的进步排序\nprogress_gold = future_data[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].sort_values(by='Gold_Progress', ascending=False)\ndecline_gold = future_data[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].sort_values(by='Gold_Progress', ascending=True)\n# 按照总奖牌数的进步排序\nprogress_total = future_data[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].sort_values(by='Total_Progress', ascending=False)\ndecline_total = future_data[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].sort_values(by='Total_Progress', ascending=True)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data['Gold_Trend']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data['Gold_Trend'] = np.where(future_data['Gold_Progress'] > 0, 'Progress', 'Decline')\nfuture_data['Total_Trend'] = np.where(future_data['Total_Progress'] > 0, 'Progress', 'Decline')\n# 按照金牌数的进步排序\nprogress_gold = future_data[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].sort_values(by='Gold_Progress', ascending=False)\ndecline_gold = future_data[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].sort_values(by='Gold_Progress', ascending=True)\n# 按照总奖牌数的进步排序\nprogress_total = future_data[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].sort_values(by='Total_Progress', ascending=False)\ndecline_total = future_data[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].sort_values(by='Total_Progress', ascending=True)\n# 输出最有可能进步的国家\nprint(\"Countries Most Likely to Improve in Gold Medals:\")",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "future_data['Total_Trend']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "future_data['Total_Trend'] = np.where(future_data['Total_Progress'] > 0, 'Progress', 'Decline')\n# 按照金牌数的进步排序\nprogress_gold = future_data[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].sort_values(by='Gold_Progress', ascending=False)\ndecline_gold = future_data[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].sort_values(by='Gold_Progress', ascending=True)\n# 按照总奖牌数的进步排序\nprogress_total = future_data[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].sort_values(by='Total_Progress', ascending=False)\ndecline_total = future_data[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].sort_values(by='Total_Progress', ascending=True)\n# 输出最有可能进步的国家\nprint(\"Countries Most Likely to Improve in Gold Medals:\")\nprint(progress_gold[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].head(10))",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "progress_gold",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "progress_gold = future_data[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].sort_values(by='Gold_Progress', ascending=False)\ndecline_gold = future_data[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].sort_values(by='Gold_Progress', ascending=True)\n# 按照总奖牌数的进步排序\nprogress_total = future_data[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].sort_values(by='Total_Progress', ascending=False)\ndecline_total = future_data[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].sort_values(by='Total_Progress', ascending=True)\n# 输出最有可能进步的国家\nprint(\"Countries Most Likely to Improve in Gold Medals:\")\nprint(progress_gold[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].head(10))\nprint(\"\\nCountries Most Likely to Decline in Gold Medals:\")\nprint(decline_gold[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].head(10))",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "decline_gold",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "decline_gold = future_data[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].sort_values(by='Gold_Progress', ascending=True)\n# 按照总奖牌数的进步排序\nprogress_total = future_data[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].sort_values(by='Total_Progress', ascending=False)\ndecline_total = future_data[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].sort_values(by='Total_Progress', ascending=True)\n# 输出最有可能进步的国家\nprint(\"Countries Most Likely to Improve in Gold Medals:\")\nprint(progress_gold[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].head(10))\nprint(\"\\nCountries Most Likely to Decline in Gold Medals:\")\nprint(decline_gold[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].head(10))\n# 输出最有可能进步的国家（按总奖牌数）",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "progress_total",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "progress_total = future_data[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].sort_values(by='Total_Progress', ascending=False)\ndecline_total = future_data[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].sort_values(by='Total_Progress', ascending=True)\n# 输出最有可能进步的国家\nprint(\"Countries Most Likely to Improve in Gold Medals:\")\nprint(progress_gold[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].head(10))\nprint(\"\\nCountries Most Likely to Decline in Gold Medals:\")\nprint(decline_gold[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].head(10))\n# 输出最有可能进步的国家（按总奖牌数）\nprint(\"\\nCountries Most Likely to Improve in Total Medals:\")\nprint(progress_total[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].head(10))",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "decline_total",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "peekOfCode": "decline_total = future_data[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].sort_values(by='Total_Progress', ascending=True)\n# 输出最有可能进步的国家\nprint(\"Countries Most Likely to Improve in Gold Medals:\")\nprint(progress_gold[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].head(10))\nprint(\"\\nCountries Most Likely to Decline in Gold Medals:\")\nprint(decline_gold[['NOC', 'Predicted_Gold', 'Gold_Progress', 'Gold_Trend']].head(10))\n# 输出最有可能进步的国家（按总奖牌数）\nprint(\"\\nCountries Most Likely to Improve in Total Medals:\")\nprint(progress_total[['NOC', 'Predicted_Total', 'Total_Progress', 'Total_Trend']].head(10))\nprint(\"\\nCountries Most Likely to Decline in Total Medals:\")",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.2-1进步退步分析",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-1零奖牌统计",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-1零奖牌统计",
        "peekOfCode": "data = pd.read_csv('summerOly_medal_counts.csv')\n# 统计每个国家在历届奥运会中没有金牌的次数\nno_gold_counts = data[data['Gold'] == 0].groupby('NOC').size()\n# 输出没有金牌的国家及其次数\nprint(no_gold_counts)\n# 保存结果到新的CSV文件\nno_gold_counts.to_csv('no_gold_counts.csv', header=['No_Gold_Counts'], index=True)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-1零奖牌统计",
        "documentation": {}
    },
    {
        "label": "no_gold_counts",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-1零奖牌统计",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-1零奖牌统计",
        "peekOfCode": "no_gold_counts = data[data['Gold'] == 0].groupby('NOC').size()\n# 输出没有金牌的国家及其次数\nprint(no_gold_counts)\n# 保存结果到新的CSV文件\nno_gold_counts.to_csv('no_gold_counts.csv', header=['No_Gold_Counts'], index=True)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-1零奖牌统计",
        "documentation": {}
    },
    {
        "label": "medal_counts_df",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "peekOfCode": "medal_counts_df = pd.read_csv('summerOly_medal_counts.csv', encoding='ISO-8859-1')\n# 筛选出未获得金牌的国家\ncountries_no_gold = medal_counts_df[medal_counts_df['Gold'] == 0]['NOC'].unique()\n# 筛选出这些国家的历年数据\nno_gold_data = medal_counts_df[medal_counts_df['NOC'].isin(countries_no_gold)].copy()\n# 计算这些国家历年的奖牌趋势\nno_gold_data.loc[:, 'trend'] = no_gold_data.groupby('NOC')['Total'].diff().fillna(0)\ngold_probabilities = no_gold_data.groupby('NOC')['trend'].apply(lambda x: np.mean(x > 0))\ngold_probabilities = gold_probabilities.clip(0, 1)\ngold_probabilities = gold_probabilities.sort_values(ascending=False)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "documentation": {}
    },
    {
        "label": "countries_no_gold",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "peekOfCode": "countries_no_gold = medal_counts_df[medal_counts_df['Gold'] == 0]['NOC'].unique()\n# 筛选出这些国家的历年数据\nno_gold_data = medal_counts_df[medal_counts_df['NOC'].isin(countries_no_gold)].copy()\n# 计算这些国家历年的奖牌趋势\nno_gold_data.loc[:, 'trend'] = no_gold_data.groupby('NOC')['Total'].diff().fillna(0)\ngold_probabilities = no_gold_data.groupby('NOC')['trend'].apply(lambda x: np.mean(x > 0))\ngold_probabilities = gold_probabilities.clip(0, 1)\ngold_probabilities = gold_probabilities.sort_values(ascending=False)\ntop_countries = gold_probabilities.head(10)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "documentation": {}
    },
    {
        "label": "no_gold_data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "peekOfCode": "no_gold_data = medal_counts_df[medal_counts_df['NOC'].isin(countries_no_gold)].copy()\n# 计算这些国家历年的奖牌趋势\nno_gold_data.loc[:, 'trend'] = no_gold_data.groupby('NOC')['Total'].diff().fillna(0)\ngold_probabilities = no_gold_data.groupby('NOC')['trend'].apply(lambda x: np.mean(x > 0))\ngold_probabilities = gold_probabilities.clip(0, 1)\ngold_probabilities = gold_probabilities.sort_values(ascending=False)\ntop_countries = gold_probabilities.head(10)\nplt.figure(figsize=(10, 6))\ntop_countries.plot(kind='bar', color='skyblue', edgecolor='black')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "documentation": {}
    },
    {
        "label": "gold_probabilities",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "peekOfCode": "gold_probabilities = no_gold_data.groupby('NOC')['trend'].apply(lambda x: np.mean(x > 0))\ngold_probabilities = gold_probabilities.clip(0, 1)\ngold_probabilities = gold_probabilities.sort_values(ascending=False)\ntop_countries = gold_probabilities.head(10)\nplt.figure(figsize=(10, 6))\ntop_countries.plot(kind='bar', color='skyblue', edgecolor='black')\n# 设置标题和标签\nplt.title(\"Top 10 Countries Likely to Win Gold Medals in 2028\", fontsize=14)\nplt.xlabel(\"Country\", fontsize=12)\nplt.ylabel(\"Probability\", fontsize=12)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "documentation": {}
    },
    {
        "label": "gold_probabilities",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "peekOfCode": "gold_probabilities = gold_probabilities.clip(0, 1)\ngold_probabilities = gold_probabilities.sort_values(ascending=False)\ntop_countries = gold_probabilities.head(10)\nplt.figure(figsize=(10, 6))\ntop_countries.plot(kind='bar', color='skyblue', edgecolor='black')\n# 设置标题和标签\nplt.title(\"Top 10 Countries Likely to Win Gold Medals in 2028\", fontsize=14)\nplt.xlabel(\"Country\", fontsize=12)\nplt.ylabel(\"Probability\", fontsize=12)\n# 显示图形",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "documentation": {}
    },
    {
        "label": "gold_probabilities",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "peekOfCode": "gold_probabilities = gold_probabilities.sort_values(ascending=False)\ntop_countries = gold_probabilities.head(10)\nplt.figure(figsize=(10, 6))\ntop_countries.plot(kind='bar', color='skyblue', edgecolor='black')\n# 设置标题和标签\nplt.title(\"Top 10 Countries Likely to Win Gold Medals in 2028\", fontsize=14)\nplt.xlabel(\"Country\", fontsize=12)\nplt.ylabel(\"Probability\", fontsize=12)\n# 显示图形\nplt.xticks(rotation=45, ha='right')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "documentation": {}
    },
    {
        "label": "top_countries",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "peekOfCode": "top_countries = gold_probabilities.head(10)\nplt.figure(figsize=(10, 6))\ntop_countries.plot(kind='bar', color='skyblue', edgecolor='black')\n# 设置标题和标签\nplt.title(\"Top 10 Countries Likely to Win Gold Medals in 2028\", fontsize=14)\nplt.xlabel(\"Country\", fontsize=12)\nplt.ylabel(\"Probability\", fontsize=12)\n# 显示图形\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.3-2奖牌突破概率分析",
        "documentation": {}
    },
    {
        "label": "programs_file_path",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "peekOfCode": "programs_file_path = 'summerOly_programs.csv'\nmedal_counts_file_path = 'summerOly_medal_counts.csv'\nprograms_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\n# 清理数据，去除非数字列\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "documentation": {}
    },
    {
        "label": "medal_counts_file_path",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "peekOfCode": "medal_counts_file_path = 'summerOly_medal_counts.csv'\nprograms_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\n# 清理数据，去除非数字列\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 独热编码处理体育项目",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "documentation": {}
    },
    {
        "label": "programs_df",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "peekOfCode": "programs_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\n# 清理数据，去除非数字列\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 独热编码处理体育项目\nprograms_df_cleaned_encoded = pd.get_dummies(programs_df[['Sport']], drop_first=True)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "documentation": {}
    },
    {
        "label": "medal_counts_df",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "peekOfCode": "medal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\n# 清理数据，去除非数字列\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 独热编码处理体育项目\nprograms_df_cleaned_encoded = pd.get_dummies(programs_df[['Sport']], drop_first=True)\n# 合并独热编码的体育项目列到原数据中",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "documentation": {}
    },
    {
        "label": "programs_df_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "peekOfCode": "programs_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 独热编码处理体育项目\nprograms_df_cleaned_encoded = pd.get_dummies(programs_df[['Sport']], drop_first=True)\n# 合并独热编码的体育项目列到原数据中\nprograms_df_cleaned = pd.concat([programs_df_cleaned, programs_df_cleaned_encoded], axis=1)\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "documentation": {}
    },
    {
        "label": "programs_df_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "peekOfCode": "programs_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 独热编码处理体育项目\nprograms_df_cleaned_encoded = pd.get_dummies(programs_df[['Sport']], drop_first=True)\n# 合并独热编码的体育项目列到原数据中\nprograms_df_cleaned = pd.concat([programs_df_cleaned, programs_df_cleaned_encoded], axis=1)\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 确保所有年份都是整数类型",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "documentation": {}
    },
    {
        "label": "programs_df_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "peekOfCode": "programs_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 独热编码处理体育项目\nprograms_df_cleaned_encoded = pd.get_dummies(programs_df[['Sport']], drop_first=True)\n# 合并独热编码的体育项目列到原数据中\nprograms_df_cleaned = pd.concat([programs_df_cleaned, programs_df_cleaned_encoded], axis=1)\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 确保所有年份都是整数类型\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 计算每年每个国家的金牌数量",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "documentation": {}
    },
    {
        "label": "programs_df_cleaned_encoded",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "peekOfCode": "programs_df_cleaned_encoded = pd.get_dummies(programs_df[['Sport']], drop_first=True)\n# 合并独热编码的体育项目列到原数据中\nprograms_df_cleaned = pd.concat([programs_df_cleaned, programs_df_cleaned_encoded], axis=1)\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 确保所有年份都是整数类型\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 计算每年每个国家的金牌数量\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 合并每年各国金牌数量与项目数量",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "documentation": {}
    },
    {
        "label": "programs_df_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "peekOfCode": "programs_df_cleaned = pd.concat([programs_df_cleaned, programs_df_cleaned_encoded], axis=1)\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 确保所有年份都是整数类型\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 计算每年每个国家的金牌数量\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 合并每年各国金牌数量与项目数量\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 绘制每年项目数量与金牌数的折线图",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "documentation": {}
    },
    {
        "label": "programs_melted_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "peekOfCode": "programs_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 确保所有年份都是整数类型\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 计算每年每个国家的金牌数量\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 合并每年各国金牌数量与项目数量\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 绘制每年项目数量与金牌数的折线图\nplt.figure(figsize=(12, 6))\nfor year in merged_data_cleaned['Year'].unique():",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "documentation": {}
    },
    {
        "label": "programs_melted_cleaned['Year']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "peekOfCode": "programs_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 计算每年每个国家的金牌数量\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 合并每年各国金牌数量与项目数量\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 绘制每年项目数量与金牌数的折线图\nplt.figure(figsize=(12, 6))\nfor year in merged_data_cleaned['Year'].unique():\n    data_for_year = merged_data_cleaned[merged_data_cleaned['Year'] == year]\n    plt.plot(data_for_year['Number_of_Events'], data_for_year['Gold'], marker='o', label=f\"Year {year}\")",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "documentation": {}
    },
    {
        "label": "medal_counts_per_year",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "peekOfCode": "medal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 合并每年各国金牌数量与项目数量\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 绘制每年项目数量与金牌数的折线图\nplt.figure(figsize=(12, 6))\nfor year in merged_data_cleaned['Year'].unique():\n    data_for_year = merged_data_cleaned[merged_data_cleaned['Year'] == year]\n    plt.plot(data_for_year['Number_of_Events'], data_for_year['Gold'], marker='o', label=f\"Year {year}\")\n# 设置图表标签和标题\nplt.title(\"Impact of Number of Events on Gold Medal Counts (2000 and onward)\", fontsize=14)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "documentation": {}
    },
    {
        "label": "merged_data_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "peekOfCode": "merged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 绘制每年项目数量与金牌数的折线图\nplt.figure(figsize=(12, 6))\nfor year in merged_data_cleaned['Year'].unique():\n    data_for_year = merged_data_cleaned[merged_data_cleaned['Year'] == year]\n    plt.plot(data_for_year['Number_of_Events'], data_for_year['Gold'], marker='o', label=f\"Year {year}\")\n# 设置图表标签和标题\nplt.title(\"Impact of Number of Events on Gold Medal Counts (2000 and onward)\", fontsize=14)\nplt.xlabel(\"Number of Events\", fontsize=12)\nplt.ylabel(\"Gold Medal Count\", fontsize=12)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-1原始版本（不建议使用）",
        "documentation": {}
    },
    {
        "label": "programs_file_path",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "peekOfCode": "programs_file_path = 'summerOly_programs.csv'\nmedal_counts_file_path = 'summerOly_medal_counts.csv'\nprograms_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "documentation": {}
    },
    {
        "label": "medal_counts_file_path",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "peekOfCode": "medal_counts_file_path = 'summerOly_medal_counts.csv'\nprograms_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "documentation": {}
    },
    {
        "label": "programs_df",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "peekOfCode": "programs_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "documentation": {}
    },
    {
        "label": "medal_counts_df",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "peekOfCode": "medal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "documentation": {}
    },
    {
        "label": "programs_df_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "peekOfCode": "programs_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "documentation": {}
    },
    {
        "label": "programs_df_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "peekOfCode": "programs_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\nyearly_summary = merged_data_cleaned.groupby('Year').agg({\n    'Number_of_Events': 'sum',  # 每年项目数的总和",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "documentation": {}
    },
    {
        "label": "programs_df_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "peekOfCode": "programs_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\nyearly_summary = merged_data_cleaned.groupby('Year').agg({\n    'Number_of_Events': 'sum',  # 每年项目数的总和\n    'Gold': 'sum'               # 每年金牌数的总和\n}).reset_index()",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "documentation": {}
    },
    {
        "label": "programs_melted_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "peekOfCode": "programs_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\nyearly_summary = merged_data_cleaned.groupby('Year').agg({\n    'Number_of_Events': 'sum',  # 每年项目数的总和\n    'Gold': 'sum'               # 每年金牌数的总和\n}).reset_index()\n# 绘制折线图\nplt.figure(figsize=(12, 6))",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "documentation": {}
    },
    {
        "label": "programs_melted_cleaned['Year']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "peekOfCode": "programs_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\nyearly_summary = merged_data_cleaned.groupby('Year').agg({\n    'Number_of_Events': 'sum',  # 每年项目数的总和\n    'Gold': 'sum'               # 每年金牌数的总和\n}).reset_index()\n# 绘制折线图\nplt.figure(figsize=(12, 6))\nplt.plot(yearly_summary['Year'], yearly_summary['Number_of_Events'], label=\"Number of Events\", marker='o', color='b')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "documentation": {}
    },
    {
        "label": "medal_counts_per_year",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "peekOfCode": "medal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\nyearly_summary = merged_data_cleaned.groupby('Year').agg({\n    'Number_of_Events': 'sum',  # 每年项目数的总和\n    'Gold': 'sum'               # 每年金牌数的总和\n}).reset_index()\n# 绘制折线图\nplt.figure(figsize=(12, 6))\nplt.plot(yearly_summary['Year'], yearly_summary['Number_of_Events'], label=\"Number of Events\", marker='o', color='b')\nplt.plot(yearly_summary['Year'], yearly_summary['Gold'], label=\"Gold Medals\", marker='o', color='g')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "documentation": {}
    },
    {
        "label": "merged_data_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "peekOfCode": "merged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\nyearly_summary = merged_data_cleaned.groupby('Year').agg({\n    'Number_of_Events': 'sum',  # 每年项目数的总和\n    'Gold': 'sum'               # 每年金牌数的总和\n}).reset_index()\n# 绘制折线图\nplt.figure(figsize=(12, 6))\nplt.plot(yearly_summary['Year'], yearly_summary['Number_of_Events'], label=\"Number of Events\", marker='o', color='b')\nplt.plot(yearly_summary['Year'], yearly_summary['Gold'], label=\"Gold Medals\", marker='o', color='g')\n# 设置标题和标签",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "documentation": {}
    },
    {
        "label": "yearly_summary",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "peekOfCode": "yearly_summary = merged_data_cleaned.groupby('Year').agg({\n    'Number_of_Events': 'sum',  # 每年项目数的总和\n    'Gold': 'sum'               # 每年金牌数的总和\n}).reset_index()\n# 绘制折线图\nplt.figure(figsize=(12, 6))\nplt.plot(yearly_summary['Year'], yearly_summary['Number_of_Events'], label=\"Number of Events\", marker='o', color='b')\nplt.plot(yearly_summary['Year'], yearly_summary['Gold'], label=\"Gold Medals\", marker='o', color='g')\n# 设置标题和标签\nplt.title(\"Relationship between Number of Events and Gold Medal Counts (1896-2024)\", fontsize=14)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-2.项目设置与奖牌数的关系",
        "documentation": {}
    },
    {
        "label": "programs_file_path",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "peekOfCode": "programs_file_path = 'summerOly_programs.csv'\nmedal_counts_file_path = 'summerOly_medal_counts.csv'\nprograms_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\n# 清理数据，去除非数字列\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "documentation": {}
    },
    {
        "label": "medal_counts_file_path",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "peekOfCode": "medal_counts_file_path = 'summerOly_medal_counts.csv'\nprograms_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\n# 清理数据，去除非数字列\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "documentation": {}
    },
    {
        "label": "programs_df",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "peekOfCode": "programs_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\n# 清理数据，去除非数字列\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "documentation": {}
    },
    {
        "label": "medal_counts_df",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "peekOfCode": "medal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\n# 清理数据，去除非数字列\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 将年份列转换为整数类型",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "documentation": {}
    },
    {
        "label": "programs_df_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "peekOfCode": "programs_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sport|Discipline|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 将年份列转换为整数类型\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 计算每年每个国家的金牌数量",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "documentation": {}
    },
    {
        "label": "programs_df_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "peekOfCode": "programs_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 将年份列转换为整数类型\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 计算每年每个国家的金牌数量\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 合并每年各国金牌数量与项目数量",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "documentation": {}
    },
    {
        "label": "programs_df_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "peekOfCode": "programs_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 将年份列转换为整数类型\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 计算每年每个国家的金牌数量\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 合并每年各国金牌数量与项目数量\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 计算每年金牌数与项目数的比例",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "documentation": {}
    },
    {
        "label": "programs_melted_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "peekOfCode": "programs_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 将年份列转换为整数类型\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 计算每年每个国家的金牌数量\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 合并每年各国金牌数量与项目数量\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 计算每年金牌数与项目数的比例\nyearly_summary = merged_data_cleaned.groupby('Year').agg({\n    'Number_of_Events': 'sum',  # 每年项目数的总和",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "documentation": {}
    },
    {
        "label": "programs_melted_cleaned['Year']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "peekOfCode": "programs_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 计算每年每个国家的金牌数量\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 合并每年各国金牌数量与项目数量\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 计算每年金牌数与项目数的比例\nyearly_summary = merged_data_cleaned.groupby('Year').agg({\n    'Number_of_Events': 'sum',  # 每年项目数的总和\n    'Gold': 'sum'               # 每年金牌数的总和\n}).reset_index()",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "documentation": {}
    },
    {
        "label": "medal_counts_per_year",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "peekOfCode": "medal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 合并每年各国金牌数量与项目数量\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 计算每年金牌数与项目数的比例\nyearly_summary = merged_data_cleaned.groupby('Year').agg({\n    'Number_of_Events': 'sum',  # 每年项目数的总和\n    'Gold': 'sum'               # 每年金牌数的总和\n}).reset_index()\n# 计算每年金牌与赛事的比率\nyearly_summary['Gold_to_Event_Ratio'] = yearly_summary['Gold'] / yearly_summary['Number_of_Events']",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "documentation": {}
    },
    {
        "label": "merged_data_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "peekOfCode": "merged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 计算每年金牌数与项目数的比例\nyearly_summary = merged_data_cleaned.groupby('Year').agg({\n    'Number_of_Events': 'sum',  # 每年项目数的总和\n    'Gold': 'sum'               # 每年金牌数的总和\n}).reset_index()\n# 计算每年金牌与赛事的比率\nyearly_summary['Gold_to_Event_Ratio'] = yearly_summary['Gold'] / yearly_summary['Number_of_Events']\n# 绘制折线图\nplt.figure(figsize=(12, 6))",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "documentation": {}
    },
    {
        "label": "yearly_summary",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "peekOfCode": "yearly_summary = merged_data_cleaned.groupby('Year').agg({\n    'Number_of_Events': 'sum',  # 每年项目数的总和\n    'Gold': 'sum'               # 每年金牌数的总和\n}).reset_index()\n# 计算每年金牌与赛事的比率\nyearly_summary['Gold_to_Event_Ratio'] = yearly_summary['Gold'] / yearly_summary['Number_of_Events']\n# 绘制折线图\nplt.figure(figsize=(12, 6))\nplt.plot(yearly_summary['Year'], yearly_summary['Gold_to_Event_Ratio'], marker='o', color='purple')\n# 设置标题和标签",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "documentation": {}
    },
    {
        "label": "yearly_summary['Gold_to_Event_Ratio']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "peekOfCode": "yearly_summary['Gold_to_Event_Ratio'] = yearly_summary['Gold'] / yearly_summary['Number_of_Events']\n# 绘制折线图\nplt.figure(figsize=(12, 6))\nplt.plot(yearly_summary['Year'], yearly_summary['Gold_to_Event_Ratio'], marker='o', color='purple')\n# 设置标题和标签\nplt.title(\"Gold to Event Ratio per Year (1896-2024)\", fontsize=14)\nplt.xlabel(\"Year\", fontsize=12)\nplt.ylabel(\"Gold to Event Ratio\", fontsize=12)\n# 显示图表\nplt.tight_layout()",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-3.每年奖牌赛事的比率",
        "documentation": {}
    },
    {
        "label": "programs_file_path",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "programs_file_path = 'summerOly_programs.csv'\nmedal_counts_file_path = 'summerOly_medal_counts.csv'\nprograms_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\n# 清理数据，去除无关列\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "medal_counts_file_path",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "medal_counts_file_path = 'summerOly_medal_counts.csv'\nprograms_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\n# 清理数据，去除无关列\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "programs_df",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "programs_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\n# 清理数据，去除无关列\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "medal_counts_df",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "medal_counts_df = pd.read_csv(medal_counts_file_path, encoding='ISO-8859-1')\n# 清理数据，去除无关列\nprograms_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 将年份列转换为整数类型",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "programs_df_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "programs_df_cleaned = programs_df.loc[:, ~programs_df.columns.str.contains(\"Code|Sports Governing Body\")]\n# 去除特殊字符年份列，例如 \"1906*\"\nprograms_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 将年份列转换为整数类型\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 汇总每年每个国家的金牌数量",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "programs_df_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "programs_df_cleaned = programs_df_cleaned.rename(columns=lambda x: x.strip().replace('*', '') if isinstance(x, str) else x)\n# 将所有年份列转换为数字类型\nprograms_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 将年份列转换为整数类型\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 汇总每年每个国家的金牌数量\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 将每年每个国家的金牌数量与项目数量数据合并",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "programs_df_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "programs_df_cleaned = programs_df_cleaned.apply(pd.to_numeric, errors='coerce')\n# 重新整理数据为\"年份\"和\"每个运动项目的赛事数\"\nprograms_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 将年份列转换为整数类型\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 汇总每年每个国家的金牌数量\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 将每年每个国家的金牌数量与项目数量数据合并\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 还原每个项目的类别信息",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "programs_melted_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "programs_melted_cleaned = programs_df_cleaned.melt(var_name='Year', value_name='Number_of_Events')\n# 将年份列转换为整数类型\nprograms_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 汇总每年每个国家的金牌数量\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 将每年每个国家的金牌数量与项目数量数据合并\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 还原每个项目的类别信息\nprograms_with_sport = programs_df[['Sport']].drop_duplicates()\nprograms_with_sport['index'] = programs_with_sport.index",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "programs_melted_cleaned['Year']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "programs_melted_cleaned['Year'] = pd.to_numeric(programs_melted_cleaned['Year'], errors='coerce', downcast='integer')\n# 汇总每年每个国家的金牌数量\nmedal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 将每年每个国家的金牌数量与项目数量数据合并\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 还原每个项目的类别信息\nprograms_with_sport = programs_df[['Sport']].drop_duplicates()\nprograms_with_sport['index'] = programs_with_sport.index\n# 合并运动项目的类别信息\nmerged_data_cleaned = pd.merge(merged_data_cleaned, programs_with_sport, how='left', left_index=True, right_on='index')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "medal_counts_per_year",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "medal_counts_per_year = medal_counts_df.groupby(['Year', 'NOC'])['Gold'].sum().reset_index()\n# 将每年每个国家的金牌数量与项目数量数据合并\nmerged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 还原每个项目的类别信息\nprograms_with_sport = programs_df[['Sport']].drop_duplicates()\nprograms_with_sport['index'] = programs_with_sport.index\n# 合并运动项目的类别信息\nmerged_data_cleaned = pd.merge(merged_data_cleaned, programs_with_sport, how='left', left_index=True, right_on='index')\n# 汇总每个项目的金牌数和赛事数量\nproject_summary = merged_data_cleaned.groupby('Sport').agg({",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "merged_data_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "merged_data_cleaned = pd.merge(medal_counts_per_year, programs_melted_cleaned, how='left', on='Year')\n# 还原每个项目的类别信息\nprograms_with_sport = programs_df[['Sport']].drop_duplicates()\nprograms_with_sport['index'] = programs_with_sport.index\n# 合并运动项目的类别信息\nmerged_data_cleaned = pd.merge(merged_data_cleaned, programs_with_sport, how='left', left_index=True, right_on='index')\n# 汇总每个项目的金牌数和赛事数量\nproject_summary = merged_data_cleaned.groupby('Sport').agg({\n    'Number_of_Events': 'sum',  # 每个运动项目的赛事数\n    'Gold': 'sum'               # 每个运动项目的金牌数",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "programs_with_sport",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "programs_with_sport = programs_df[['Sport']].drop_duplicates()\nprograms_with_sport['index'] = programs_with_sport.index\n# 合并运动项目的类别信息\nmerged_data_cleaned = pd.merge(merged_data_cleaned, programs_with_sport, how='left', left_index=True, right_on='index')\n# 汇总每个项目的金牌数和赛事数量\nproject_summary = merged_data_cleaned.groupby('Sport').agg({\n    'Number_of_Events': 'sum',  # 每个运动项目的赛事数\n    'Gold': 'sum'               # 每个运动项目的金牌数\n}).reset_index()\n# 按金牌数量对项目排序",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "programs_with_sport['index']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "programs_with_sport['index'] = programs_with_sport.index\n# 合并运动项目的类别信息\nmerged_data_cleaned = pd.merge(merged_data_cleaned, programs_with_sport, how='left', left_index=True, right_on='index')\n# 汇总每个项目的金牌数和赛事数量\nproject_summary = merged_data_cleaned.groupby('Sport').agg({\n    'Number_of_Events': 'sum',  # 每个运动项目的赛事数\n    'Gold': 'sum'               # 每个运动项目的金牌数\n}).reset_index()\n# 按金牌数量对项目排序\nproject_summary_sorted = project_summary.sort_values(by='Gold', ascending=False)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "merged_data_cleaned",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "merged_data_cleaned = pd.merge(merged_data_cleaned, programs_with_sport, how='left', left_index=True, right_on='index')\n# 汇总每个项目的金牌数和赛事数量\nproject_summary = merged_data_cleaned.groupby('Sport').agg({\n    'Number_of_Events': 'sum',  # 每个运动项目的赛事数\n    'Gold': 'sum'               # 每个运动项目的金牌数\n}).reset_index()\n# 按金牌数量对项目排序\nproject_summary_sorted = project_summary.sort_values(by='Gold', ascending=False)\n# 绘制金牌数量的排序条形图\nplt.figure(figsize=(14, 8))",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "project_summary",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "project_summary = merged_data_cleaned.groupby('Sport').agg({\n    'Number_of_Events': 'sum',  # 每个运动项目的赛事数\n    'Gold': 'sum'               # 每个运动项目的金牌数\n}).reset_index()\n# 按金牌数量对项目排序\nproject_summary_sorted = project_summary.sort_values(by='Gold', ascending=False)\n# 绘制金牌数量的排序条形图\nplt.figure(figsize=(14, 8))\nbars = plt.barh(project_summary_sorted['Sport'], project_summary_sorted['Gold'], color=plt.cm.viridis(project_summary_sorted['Gold'] / max(project_summary_sorted['Gold'])))\nplt.xlabel(\"Gold Medals\", fontsize=14)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "project_summary_sorted",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "project_summary_sorted = project_summary.sort_values(by='Gold', ascending=False)\n# 绘制金牌数量的排序条形图\nplt.figure(figsize=(14, 8))\nbars = plt.barh(project_summary_sorted['Sport'], project_summary_sorted['Gold'], color=plt.cm.viridis(project_summary_sorted['Gold'] / max(project_summary_sorted['Gold'])))\nplt.xlabel(\"Gold Medals\", fontsize=14)\nplt.ylabel(\"Sport\", fontsize=14)\nplt.title(\"Gold Medals by Sport (Sorted)\", fontsize=16)\n# 增加条形图中的色彩渐变\nfor bar in bars:\n    bar.set_edgecolor('black')",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "bars",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "peekOfCode": "bars = plt.barh(project_summary_sorted['Sport'], project_summary_sorted['Gold'], color=plt.cm.viridis(project_summary_sorted['Gold'] / max(project_summary_sorted['Gold'])))\nplt.xlabel(\"Gold Medals\", fontsize=14)\nplt.ylabel(\"Sport\", fontsize=14)\nplt.title(\"Gold Medals by Sport (Sorted)\", fontsize=16)\n# 增加条形图中的色彩渐变\nfor bar in bars:\n    bar.set_edgecolor('black')\nplt.tight_layout()\nplt.show()\n# 绘制气泡图，气泡大小表示金牌数量，颜色表示赛事数",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-4金牌数量和赛事数量",
        "documentation": {}
    },
    {
        "label": "hosts_file_path",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "peekOfCode": "hosts_file_path = 'summerOly_hosts.csv'\nmedal_counts_file_path = 'summerOly_medal_counts.csv'\nprograms_file_path = 'summerOly_programs.csv'\nhosts_df = pd.read_csv(hosts_file_path, encoding='utf-8-sig')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='utf-8-sig')\nprograms_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\n# 清理列名中的多余空格\nhosts_df.columns = hosts_df.columns.str.strip()\nmedal_counts_df.columns = medal_counts_df.columns.str.strip()\nprograms_df.columns = programs_df.columns.str.strip()",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "documentation": {}
    },
    {
        "label": "medal_counts_file_path",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "peekOfCode": "medal_counts_file_path = 'summerOly_medal_counts.csv'\nprograms_file_path = 'summerOly_programs.csv'\nhosts_df = pd.read_csv(hosts_file_path, encoding='utf-8-sig')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='utf-8-sig')\nprograms_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\n# 清理列名中的多余空格\nhosts_df.columns = hosts_df.columns.str.strip()\nmedal_counts_df.columns = medal_counts_df.columns.str.strip()\nprograms_df.columns = programs_df.columns.str.strip()\nhosts_df['Gold'] = np.random.randint(5, 50, size=len(hosts_df))  # 生成5到50之间的随机金牌数量",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "documentation": {}
    },
    {
        "label": "programs_file_path",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "peekOfCode": "programs_file_path = 'summerOly_programs.csv'\nhosts_df = pd.read_csv(hosts_file_path, encoding='utf-8-sig')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='utf-8-sig')\nprograms_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\n# 清理列名中的多余空格\nhosts_df.columns = hosts_df.columns.str.strip()\nmedal_counts_df.columns = medal_counts_df.columns.str.strip()\nprograms_df.columns = programs_df.columns.str.strip()\nhosts_df['Gold'] = np.random.randint(5, 50, size=len(hosts_df))  # 生成5到50之间的随机金牌数量\nhosts_df['Number_of_Events'] = np.random.randint(10, 40, size=len(hosts_df))  # 生成10到40之间的随机赛事数量",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "documentation": {}
    },
    {
        "label": "hosts_df",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "peekOfCode": "hosts_df = pd.read_csv(hosts_file_path, encoding='utf-8-sig')\nmedal_counts_df = pd.read_csv(medal_counts_file_path, encoding='utf-8-sig')\nprograms_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\n# 清理列名中的多余空格\nhosts_df.columns = hosts_df.columns.str.strip()\nmedal_counts_df.columns = medal_counts_df.columns.str.strip()\nprograms_df.columns = programs_df.columns.str.strip()\nhosts_df['Gold'] = np.random.randint(5, 50, size=len(hosts_df))  # 生成5到50之间的随机金牌数量\nhosts_df['Number_of_Events'] = np.random.randint(10, 40, size=len(hosts_df))  # 生成10到40之间的随机赛事数量\n# 随机生成全球金牌总数",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "documentation": {}
    },
    {
        "label": "medal_counts_df",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "peekOfCode": "medal_counts_df = pd.read_csv(medal_counts_file_path, encoding='utf-8-sig')\nprograms_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\n# 清理列名中的多余空格\nhosts_df.columns = hosts_df.columns.str.strip()\nmedal_counts_df.columns = medal_counts_df.columns.str.strip()\nprograms_df.columns = programs_df.columns.str.strip()\nhosts_df['Gold'] = np.random.randint(5, 50, size=len(hosts_df))  # 生成5到50之间的随机金牌数量\nhosts_df['Number_of_Events'] = np.random.randint(10, 40, size=len(hosts_df))  # 生成10到40之间的随机赛事数量\n# 随机生成全球金牌总数\nmedal_counts_df['Gold'] = np.random.randint(100, 500, size=len(medal_counts_df))  # 生成100到500之间的随机总金牌数量",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "documentation": {}
    },
    {
        "label": "programs_df",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "peekOfCode": "programs_df = pd.read_csv(programs_file_path, encoding='ISO-8859-1')\n# 清理列名中的多余空格\nhosts_df.columns = hosts_df.columns.str.strip()\nmedal_counts_df.columns = medal_counts_df.columns.str.strip()\nprograms_df.columns = programs_df.columns.str.strip()\nhosts_df['Gold'] = np.random.randint(5, 50, size=len(hosts_df))  # 生成5到50之间的随机金牌数量\nhosts_df['Number_of_Events'] = np.random.randint(10, 40, size=len(hosts_df))  # 生成10到40之间的随机赛事数量\n# 随机生成全球金牌总数\nmedal_counts_df['Gold'] = np.random.randint(100, 500, size=len(medal_counts_df))  # 生成100到500之间的随机总金牌数量\n# 绘制数据的关系：主办国的金牌数与项目数之间的关系",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "documentation": {}
    },
    {
        "label": "hosts_df.columns",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "peekOfCode": "hosts_df.columns = hosts_df.columns.str.strip()\nmedal_counts_df.columns = medal_counts_df.columns.str.strip()\nprograms_df.columns = programs_df.columns.str.strip()\nhosts_df['Gold'] = np.random.randint(5, 50, size=len(hosts_df))  # 生成5到50之间的随机金牌数量\nhosts_df['Number_of_Events'] = np.random.randint(10, 40, size=len(hosts_df))  # 生成10到40之间的随机赛事数量\n# 随机生成全球金牌总数\nmedal_counts_df['Gold'] = np.random.randint(100, 500, size=len(medal_counts_df))  # 生成100到500之间的随机总金牌数量\n# 绘制数据的关系：主办国的金牌数与项目数之间的关系\nplt.figure(figsize=(12, 6))\nplt.scatter(hosts_df['Number_of_Events'], hosts_df['Gold'], color='blue', label=\"Gold Medals vs Number of Events\")",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "documentation": {}
    },
    {
        "label": "medal_counts_df.columns",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "peekOfCode": "medal_counts_df.columns = medal_counts_df.columns.str.strip()\nprograms_df.columns = programs_df.columns.str.strip()\nhosts_df['Gold'] = np.random.randint(5, 50, size=len(hosts_df))  # 生成5到50之间的随机金牌数量\nhosts_df['Number_of_Events'] = np.random.randint(10, 40, size=len(hosts_df))  # 生成10到40之间的随机赛事数量\n# 随机生成全球金牌总数\nmedal_counts_df['Gold'] = np.random.randint(100, 500, size=len(medal_counts_df))  # 生成100到500之间的随机总金牌数量\n# 绘制数据的关系：主办国的金牌数与项目数之间的关系\nplt.figure(figsize=(12, 6))\nplt.scatter(hosts_df['Number_of_Events'], hosts_df['Gold'], color='blue', label=\"Gold Medals vs Number of Events\")\nplt.title(\"Relationship Between Number of Events and Gold Medals by Host Country\", fontsize=14)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "documentation": {}
    },
    {
        "label": "programs_df.columns",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "peekOfCode": "programs_df.columns = programs_df.columns.str.strip()\nhosts_df['Gold'] = np.random.randint(5, 50, size=len(hosts_df))  # 生成5到50之间的随机金牌数量\nhosts_df['Number_of_Events'] = np.random.randint(10, 40, size=len(hosts_df))  # 生成10到40之间的随机赛事数量\n# 随机生成全球金牌总数\nmedal_counts_df['Gold'] = np.random.randint(100, 500, size=len(medal_counts_df))  # 生成100到500之间的随机总金牌数量\n# 绘制数据的关系：主办国的金牌数与项目数之间的关系\nplt.figure(figsize=(12, 6))\nplt.scatter(hosts_df['Number_of_Events'], hosts_df['Gold'], color='blue', label=\"Gold Medals vs Number of Events\")\nplt.title(\"Relationship Between Number of Events and Gold Medals by Host Country\", fontsize=14)\nplt.xlabel(\"Number of Events\", fontsize=12)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "documentation": {}
    },
    {
        "label": "hosts_df['Gold']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "peekOfCode": "hosts_df['Gold'] = np.random.randint(5, 50, size=len(hosts_df))  # 生成5到50之间的随机金牌数量\nhosts_df['Number_of_Events'] = np.random.randint(10, 40, size=len(hosts_df))  # 生成10到40之间的随机赛事数量\n# 随机生成全球金牌总数\nmedal_counts_df['Gold'] = np.random.randint(100, 500, size=len(medal_counts_df))  # 生成100到500之间的随机总金牌数量\n# 绘制数据的关系：主办国的金牌数与项目数之间的关系\nplt.figure(figsize=(12, 6))\nplt.scatter(hosts_df['Number_of_Events'], hosts_df['Gold'], color='blue', label=\"Gold Medals vs Number of Events\")\nplt.title(\"Relationship Between Number of Events and Gold Medals by Host Country\", fontsize=14)\nplt.xlabel(\"Number of Events\", fontsize=12)\nplt.ylabel(\"Gold Medals\", fontsize=12)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "documentation": {}
    },
    {
        "label": "hosts_df['Number_of_Events']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "peekOfCode": "hosts_df['Number_of_Events'] = np.random.randint(10, 40, size=len(hosts_df))  # 生成10到40之间的随机赛事数量\n# 随机生成全球金牌总数\nmedal_counts_df['Gold'] = np.random.randint(100, 500, size=len(medal_counts_df))  # 生成100到500之间的随机总金牌数量\n# 绘制数据的关系：主办国的金牌数与项目数之间的关系\nplt.figure(figsize=(12, 6))\nplt.scatter(hosts_df['Number_of_Events'], hosts_df['Gold'], color='blue', label=\"Gold Medals vs Number of Events\")\nplt.title(\"Relationship Between Number of Events and Gold Medals by Host Country\", fontsize=14)\nplt.xlabel(\"Number of Events\", fontsize=12)\nplt.ylabel(\"Gold Medals\", fontsize=12)\nplt.tight_layout()",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "documentation": {}
    },
    {
        "label": "medal_counts_df['Gold']",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "peekOfCode": "medal_counts_df['Gold'] = np.random.randint(100, 500, size=len(medal_counts_df))  # 生成100到500之间的随机总金牌数量\n# 绘制数据的关系：主办国的金牌数与项目数之间的关系\nplt.figure(figsize=(12, 6))\nplt.scatter(hosts_df['Number_of_Events'], hosts_df['Gold'], color='blue', label=\"Gold Medals vs Number of Events\")\nplt.title(\"Relationship Between Number of Events and Gold Medals by Host Country\", fontsize=14)\nplt.xlabel(\"Number of Events\", fontsize=12)\nplt.ylabel(\"Gold Medals\", fontsize=12)\nplt.tight_layout()\nplt.show()",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.4-5东道主效应",
        "documentation": {}
    },
    {
        "label": "countries",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "peekOfCode": "countries = ['China', 'USA', 'Romania', 'Japan', 'Russia', 'Germany', 'Brazil']\nsports = ['Volleyball', 'Gymnastics', 'Basketball', 'Football', 'Tennis', 'Swimming', 'Track & Field']\nmedals_data = []\nfor country in countries:\n    for sport in sports:\n        gold = np.random.randint(0, 10)  # 金牌\n        silver = np.random.randint(0, 10)  # 银牌\n        bronze = np.random.randint(0, 10)  # 铜牌\n        total = gold + silver + bronze\n        medals_data.append([country, sport, gold, silver, bronze, total])",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "documentation": {}
    },
    {
        "label": "sports",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "peekOfCode": "sports = ['Volleyball', 'Gymnastics', 'Basketball', 'Football', 'Tennis', 'Swimming', 'Track & Field']\nmedals_data = []\nfor country in countries:\n    for sport in sports:\n        gold = np.random.randint(0, 10)  # 金牌\n        silver = np.random.randint(0, 10)  # 银牌\n        bronze = np.random.randint(0, 10)  # 铜牌\n        total = gold + silver + bronze\n        medals_data.append([country, sport, gold, silver, bronze, total])\ndf = pd.DataFrame(medals_data, columns=['Country', 'Sport', 'Gold', 'Silver', 'Bronze', 'Total'])",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "documentation": {}
    },
    {
        "label": "medals_data",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "peekOfCode": "medals_data = []\nfor country in countries:\n    for sport in sports:\n        gold = np.random.randint(0, 10)  # 金牌\n        silver = np.random.randint(0, 10)  # 银牌\n        bronze = np.random.randint(0, 10)  # 铜牌\n        total = gold + silver + bronze\n        medals_data.append([country, sport, gold, silver, bronze, total])\ndf = pd.DataFrame(medals_data, columns=['Country', 'Sport', 'Gold', 'Silver', 'Bronze', 'Total'])\ncoach_effect = {",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "peekOfCode": "df = pd.DataFrame(medals_data, columns=['Country', 'Sport', 'Gold', 'Silver', 'Bronze', 'Total'])\ncoach_effect = {\n    'China': {'Volleyball': 3},\n    'USA': {'Gymnastics': 4},\n    'Romania': {'Gymnastics': 5}\n}\nfor country, effects in coach_effect.items():\n    for sport, effect in effects.items():\n        df.loc[(df['Country'] == country) & (df['Sport'] == sport), 'Gold'] += effect\nprint(\"Updated Medal Data with Coach Effects:\")",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "documentation": {}
    },
    {
        "label": "coach_effect",
        "kind": 5,
        "importPath": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "description": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "peekOfCode": "coach_effect = {\n    'China': {'Volleyball': 3},\n    'USA': {'Gymnastics': 4},\n    'Romania': {'Gymnastics': 5}\n}\nfor country, effects in coach_effect.items():\n    for sport, effect in effects.items():\n        df.loc[(df['Country'] == country) & (df['Sport'] == sport), 'Gold'] += effect\nprint(\"Updated Medal Data with Coach Effects:\")\nprint(df)",
        "detail": "M23 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.M23配套资料 2025美赛C题1-5问M奖级可运行代码展示+建模教程+结果分析等！2025美赛C题超详细解析教程.5-1 教练效应",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "description": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "peekOfCode": "df = pd.read_csv(\"weatherHistory.csv\", encoding='ISO-8859-1')\n# 选择聚类和分类的特征\nfeatures = df[['Temperature (C)', 'Apparent Temperature (C)', 'Humidity', \n               'Wind Speed (km/h)', 'Wind Bearing (degrees)', \n               'Visibility (km)', 'Pressure (millibars)']]\n# 标准化数据\nscaler = StandardScaler()\nfeatures_scaled = scaler.fit_transform(features)\n# 使用DBSCAN进行聚类\ndbscan = DBSCAN(eps=0.5, min_samples=5)",
        "detail": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "documentation": {}
    },
    {
        "label": "features",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "description": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "peekOfCode": "features = df[['Temperature (C)', 'Apparent Temperature (C)', 'Humidity', \n               'Wind Speed (km/h)', 'Wind Bearing (degrees)', \n               'Visibility (km)', 'Pressure (millibars)']]\n# 标准化数据\nscaler = StandardScaler()\nfeatures_scaled = scaler.fit_transform(features)\n# 使用DBSCAN进行聚类\ndbscan = DBSCAN(eps=0.5, min_samples=5)\nlabels = dbscan.fit_predict(features_scaled)\n# 将 DBSCAN 的标签映射为 0 和 1，-1 为噪声，标记为 1（异常），其他标记为 0（正常）",
        "detail": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "documentation": {}
    },
    {
        "label": "scaler",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "description": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "peekOfCode": "scaler = StandardScaler()\nfeatures_scaled = scaler.fit_transform(features)\n# 使用DBSCAN进行聚类\ndbscan = DBSCAN(eps=0.5, min_samples=5)\nlabels = dbscan.fit_predict(features_scaled)\n# 将 DBSCAN 的标签映射为 0 和 1，-1 为噪声，标记为 1（异常），其他标记为 0（正常）\ny_true = np.where(labels == -1, 1, 0)  # 1: 异常, 0: 正常\ny_pred = np.where(labels == -1, 1, 0)  # DBSCAN 输出的标签\n# 计算噪声比（DBSCAN 标签为-1的比例）\nnoise_count = np.sum(labels == -1)",
        "detail": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "documentation": {}
    },
    {
        "label": "features_scaled",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "description": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "peekOfCode": "features_scaled = scaler.fit_transform(features)\n# 使用DBSCAN进行聚类\ndbscan = DBSCAN(eps=0.5, min_samples=5)\nlabels = dbscan.fit_predict(features_scaled)\n# 将 DBSCAN 的标签映射为 0 和 1，-1 为噪声，标记为 1（异常），其他标记为 0（正常）\ny_true = np.where(labels == -1, 1, 0)  # 1: 异常, 0: 正常\ny_pred = np.where(labels == -1, 1, 0)  # DBSCAN 输出的标签\n# 计算噪声比（DBSCAN 标签为-1的比例）\nnoise_count = np.sum(labels == -1)\nnoise_ratio = noise_count / len(labels)",
        "detail": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "documentation": {}
    },
    {
        "label": "dbscan",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "description": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "peekOfCode": "dbscan = DBSCAN(eps=0.5, min_samples=5)\nlabels = dbscan.fit_predict(features_scaled)\n# 将 DBSCAN 的标签映射为 0 和 1，-1 为噪声，标记为 1（异常），其他标记为 0（正常）\ny_true = np.where(labels == -1, 1, 0)  # 1: 异常, 0: 正常\ny_pred = np.where(labels == -1, 1, 0)  # DBSCAN 输出的标签\n# 计算噪声比（DBSCAN 标签为-1的比例）\nnoise_count = np.sum(labels == -1)\nnoise_ratio = noise_count / len(labels)\n# 输出噪声比\nprint(f\"噪声数量: {noise_count}\")",
        "detail": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "description": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "peekOfCode": "labels = dbscan.fit_predict(features_scaled)\n# 将 DBSCAN 的标签映射为 0 和 1，-1 为噪声，标记为 1（异常），其他标记为 0（正常）\ny_true = np.where(labels == -1, 1, 0)  # 1: 异常, 0: 正常\ny_pred = np.where(labels == -1, 1, 0)  # DBSCAN 输出的标签\n# 计算噪声比（DBSCAN 标签为-1的比例）\nnoise_count = np.sum(labels == -1)\nnoise_ratio = noise_count / len(labels)\n# 输出噪声比\nprint(f\"噪声数量: {noise_count}\")\nprint(f\"噪声比: {noise_ratio}\")",
        "detail": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "documentation": {}
    },
    {
        "label": "y_true",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "description": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "peekOfCode": "y_true = np.where(labels == -1, 1, 0)  # 1: 异常, 0: 正常\ny_pred = np.where(labels == -1, 1, 0)  # DBSCAN 输出的标签\n# 计算噪声比（DBSCAN 标签为-1的比例）\nnoise_count = np.sum(labels == -1)\nnoise_ratio = noise_count / len(labels)\n# 输出噪声比\nprint(f\"噪声数量: {noise_count}\")\nprint(f\"噪声比: {noise_ratio}\")\n# 混淆矩阵\ncm = confusion_matrix(y_true, y_pred)",
        "detail": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "description": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "peekOfCode": "y_pred = np.where(labels == -1, 1, 0)  # DBSCAN 输出的标签\n# 计算噪声比（DBSCAN 标签为-1的比例）\nnoise_count = np.sum(labels == -1)\nnoise_ratio = noise_count / len(labels)\n# 输出噪声比\nprint(f\"噪声数量: {noise_count}\")\nprint(f\"噪声比: {noise_ratio}\")\n# 混淆矩阵\ncm = confusion_matrix(y_true, y_pred)\nprint(\"混淆矩阵:\\n\", cm)",
        "detail": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "documentation": {}
    },
    {
        "label": "noise_count",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "description": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "peekOfCode": "noise_count = np.sum(labels == -1)\nnoise_ratio = noise_count / len(labels)\n# 输出噪声比\nprint(f\"噪声数量: {noise_count}\")\nprint(f\"噪声比: {noise_ratio}\")\n# 混淆矩阵\ncm = confusion_matrix(y_true, y_pred)\nprint(\"混淆矩阵:\\n\", cm)\n# 计算F1分数\nf1 = f1_score(y_true, y_pred)",
        "detail": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "documentation": {}
    },
    {
        "label": "noise_ratio",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "description": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "peekOfCode": "noise_ratio = noise_count / len(labels)\n# 输出噪声比\nprint(f\"噪声数量: {noise_count}\")\nprint(f\"噪声比: {noise_ratio}\")\n# 混淆矩阵\ncm = confusion_matrix(y_true, y_pred)\nprint(\"混淆矩阵:\\n\", cm)\n# 计算F1分数\nf1 = f1_score(y_true, y_pred)\nprint(f\"F1 分数: {f1:.4f}\")",
        "detail": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "description": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "peekOfCode": "cm = confusion_matrix(y_true, y_pred)\nprint(\"混淆矩阵:\\n\", cm)\n# 计算F1分数\nf1 = f1_score(y_true, y_pred)\nprint(f\"F1 分数: {f1:.4f}\")\n# 计算 ROC 曲线\nfpr, tpr, thresholds = roc_curve(y_true, y_pred)\nroc_auc = auc(fpr, tpr)\n# 绘制 ROC 曲线\nplt.figure(figsize=(8, 6))",
        "detail": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "description": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "peekOfCode": "f1 = f1_score(y_true, y_pred)\nprint(f\"F1 分数: {f1:.4f}\")\n# 计算 ROC 曲线\nfpr, tpr, thresholds = roc_curve(y_true, y_pred)\nroc_auc = auc(fpr, tpr)\n# 绘制 ROC 曲线\nplt.figure(figsize=(8, 6))\nplt.plot(fpr, tpr, color='blue', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')\nplt.plot([0, 1], [0, 1], color='gray', linestyle='--')\nplt.xlim([0.0, 1.0])",
        "detail": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "documentation": {}
    },
    {
        "label": "roc_auc",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "description": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "peekOfCode": "roc_auc = auc(fpr, tpr)\n# 绘制 ROC 曲线\nplt.figure(figsize=(8, 6))\nplt.plot(fpr, tpr, color='blue', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')\nplt.plot([0, 1], [0, 1], color='gray', linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve')",
        "detail": "数据挖掘大作业.代码.异常分析.DBSCAN",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.LOF",
        "description": "数据挖掘大作业.代码.异常分析.LOF",
        "peekOfCode": "df = pd.read_csv(\"weatherHistory.csv\", encoding='ISO-8859-1')\n# 选择特征\nfeatures = df[['Temperature (C)', 'Apparent Temperature (C)', 'Humidity', \n               'Wind Speed (km/h)', 'Wind Bearing (degrees)', \n               'Visibility (km)', 'Pressure (millibars)']]\n# 数据标准化\nscaler = StandardScaler()\nfeatures_scaled = scaler.fit_transform(features)\n# 使用LOF进行异常检测\nlof = LocalOutlierFactor(n_neighbors=20, contamination=0.1)",
        "detail": "数据挖掘大作业.代码.异常分析.LOF",
        "documentation": {}
    },
    {
        "label": "features",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.LOF",
        "description": "数据挖掘大作业.代码.异常分析.LOF",
        "peekOfCode": "features = df[['Temperature (C)', 'Apparent Temperature (C)', 'Humidity', \n               'Wind Speed (km/h)', 'Wind Bearing (degrees)', \n               'Visibility (km)', 'Pressure (millibars)']]\n# 数据标准化\nscaler = StandardScaler()\nfeatures_scaled = scaler.fit_transform(features)\n# 使用LOF进行异常检测\nlof = LocalOutlierFactor(n_neighbors=20, contamination=0.1)\ny_pred = lof.fit_predict(features_scaled)\n# LOF输出的预测值：1 表示正常点，-1 表示异常点（噪声）",
        "detail": "数据挖掘大作业.代码.异常分析.LOF",
        "documentation": {}
    },
    {
        "label": "scaler",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.LOF",
        "description": "数据挖掘大作业.代码.异常分析.LOF",
        "peekOfCode": "scaler = StandardScaler()\nfeatures_scaled = scaler.fit_transform(features)\n# 使用LOF进行异常检测\nlof = LocalOutlierFactor(n_neighbors=20, contamination=0.1)\ny_pred = lof.fit_predict(features_scaled)\n# LOF输出的预测值：1 表示正常点，-1 表示异常点（噪声）\n# 将预测结果转换为 0 和 1 的标签，1 表示异常，0 表示正常\ny_pred = np.where(y_pred == 1, 0, 1)\n# 真实标签，在没有真实标签的情况下，假设LOF的噪声标签为真实标签\ny_true = y_pred",
        "detail": "数据挖掘大作业.代码.异常分析.LOF",
        "documentation": {}
    },
    {
        "label": "features_scaled",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.LOF",
        "description": "数据挖掘大作业.代码.异常分析.LOF",
        "peekOfCode": "features_scaled = scaler.fit_transform(features)\n# 使用LOF进行异常检测\nlof = LocalOutlierFactor(n_neighbors=20, contamination=0.1)\ny_pred = lof.fit_predict(features_scaled)\n# LOF输出的预测值：1 表示正常点，-1 表示异常点（噪声）\n# 将预测结果转换为 0 和 1 的标签，1 表示异常，0 表示正常\ny_pred = np.where(y_pred == 1, 0, 1)\n# 真实标签，在没有真实标签的情况下，假设LOF的噪声标签为真实标签\ny_true = y_pred\n# 计算噪声数量和噪声比",
        "detail": "数据挖掘大作业.代码.异常分析.LOF",
        "documentation": {}
    },
    {
        "label": "lof",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.LOF",
        "description": "数据挖掘大作业.代码.异常分析.LOF",
        "peekOfCode": "lof = LocalOutlierFactor(n_neighbors=20, contamination=0.1)\ny_pred = lof.fit_predict(features_scaled)\n# LOF输出的预测值：1 表示正常点，-1 表示异常点（噪声）\n# 将预测结果转换为 0 和 1 的标签，1 表示异常，0 表示正常\ny_pred = np.where(y_pred == 1, 0, 1)\n# 真实标签，在没有真实标签的情况下，假设LOF的噪声标签为真实标签\ny_true = y_pred\n# 计算噪声数量和噪声比\nnoise_count = np.sum(y_pred == 1)\nnoise_ratio = noise_count / len(y_pred)",
        "detail": "数据挖掘大作业.代码.异常分析.LOF",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.LOF",
        "description": "数据挖掘大作业.代码.异常分析.LOF",
        "peekOfCode": "y_pred = lof.fit_predict(features_scaled)\n# LOF输出的预测值：1 表示正常点，-1 表示异常点（噪声）\n# 将预测结果转换为 0 和 1 的标签，1 表示异常，0 表示正常\ny_pred = np.where(y_pred == 1, 0, 1)\n# 真实标签，在没有真实标签的情况下，假设LOF的噪声标签为真实标签\ny_true = y_pred\n# 计算噪声数量和噪声比\nnoise_count = np.sum(y_pred == 1)\nnoise_ratio = noise_count / len(y_pred)\n# 输出噪声数量和噪声比",
        "detail": "数据挖掘大作业.代码.异常分析.LOF",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.LOF",
        "description": "数据挖掘大作业.代码.异常分析.LOF",
        "peekOfCode": "y_pred = np.where(y_pred == 1, 0, 1)\n# 真实标签，在没有真实标签的情况下，假设LOF的噪声标签为真实标签\ny_true = y_pred\n# 计算噪声数量和噪声比\nnoise_count = np.sum(y_pred == 1)\nnoise_ratio = noise_count / len(y_pred)\n# 输出噪声数量和噪声比\nprint(f\"噪声数量: {noise_count}\")\nprint(f\"噪声比: {noise_ratio}\")\n# 计算混淆矩阵",
        "detail": "数据挖掘大作业.代码.异常分析.LOF",
        "documentation": {}
    },
    {
        "label": "y_true",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.LOF",
        "description": "数据挖掘大作业.代码.异常分析.LOF",
        "peekOfCode": "y_true = y_pred\n# 计算噪声数量和噪声比\nnoise_count = np.sum(y_pred == 1)\nnoise_ratio = noise_count / len(y_pred)\n# 输出噪声数量和噪声比\nprint(f\"噪声数量: {noise_count}\")\nprint(f\"噪声比: {noise_ratio}\")\n# 计算混淆矩阵\nconf_matrix = confusion_matrix(y_true, y_pred)\nprint(\"混淆矩阵:\\n\", conf_matrix)",
        "detail": "数据挖掘大作业.代码.异常分析.LOF",
        "documentation": {}
    },
    {
        "label": "noise_count",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.LOF",
        "description": "数据挖掘大作业.代码.异常分析.LOF",
        "peekOfCode": "noise_count = np.sum(y_pred == 1)\nnoise_ratio = noise_count / len(y_pred)\n# 输出噪声数量和噪声比\nprint(f\"噪声数量: {noise_count}\")\nprint(f\"噪声比: {noise_ratio}\")\n# 计算混淆矩阵\nconf_matrix = confusion_matrix(y_true, y_pred)\nprint(\"混淆矩阵:\\n\", conf_matrix)\n# 计算F1分数\nf1 = f1_score(y_true, y_pred)",
        "detail": "数据挖掘大作业.代码.异常分析.LOF",
        "documentation": {}
    },
    {
        "label": "noise_ratio",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.LOF",
        "description": "数据挖掘大作业.代码.异常分析.LOF",
        "peekOfCode": "noise_ratio = noise_count / len(y_pred)\n# 输出噪声数量和噪声比\nprint(f\"噪声数量: {noise_count}\")\nprint(f\"噪声比: {noise_ratio}\")\n# 计算混淆矩阵\nconf_matrix = confusion_matrix(y_true, y_pred)\nprint(\"混淆矩阵:\\n\", conf_matrix)\n# 计算F1分数\nf1 = f1_score(y_true, y_pred)\nprint(f\"F1 分数: {f1:.4f}\")",
        "detail": "数据挖掘大作业.代码.异常分析.LOF",
        "documentation": {}
    },
    {
        "label": "conf_matrix",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.LOF",
        "description": "数据挖掘大作业.代码.异常分析.LOF",
        "peekOfCode": "conf_matrix = confusion_matrix(y_true, y_pred)\nprint(\"混淆矩阵:\\n\", conf_matrix)\n# 计算F1分数\nf1 = f1_score(y_true, y_pred)\nprint(f\"F1 分数: {f1:.4f}\")\n# 计算ROC曲线及AUC\nfpr, tpr, thresholds = roc_curve(y_true, y_pred)\nroc_auc = auc(fpr, tpr)\n# 绘制ROC曲线\nplt.figure(figsize=(8, 6))",
        "detail": "数据挖掘大作业.代码.异常分析.LOF",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.LOF",
        "description": "数据挖掘大作业.代码.异常分析.LOF",
        "peekOfCode": "f1 = f1_score(y_true, y_pred)\nprint(f\"F1 分数: {f1:.4f}\")\n# 计算ROC曲线及AUC\nfpr, tpr, thresholds = roc_curve(y_true, y_pred)\nroc_auc = auc(fpr, tpr)\n# 绘制ROC曲线\nplt.figure(figsize=(8, 6))\nplt.plot(fpr, tpr, color='blue', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')\nplt.plot([0, 1], [0, 1], color='gray', linestyle='--')\nplt.xlim([0.0, 1.0])",
        "detail": "数据挖掘大作业.代码.异常分析.LOF",
        "documentation": {}
    },
    {
        "label": "roc_auc",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.异常分析.LOF",
        "description": "数据挖掘大作业.代码.异常分析.LOF",
        "peekOfCode": "roc_auc = auc(fpr, tpr)\n# 绘制ROC曲线\nplt.figure(figsize=(8, 6))\nplt.plot(fpr, tpr, color='blue', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')\nplt.plot([0, 1], [0, 1], color='gray', linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve')",
        "detail": "数据挖掘大作业.代码.异常分析.LOF",
        "documentation": {}
    },
    {
        "label": "recursive_forecast",
        "kind": 2,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "peekOfCode": "def recursive_forecast(model_path, input_data, steps):\n    \"\"\"\n    使用保存的模型进行滚动预测。\n    \"\"\"\n    # 加载模型\n    model = load_model(model_path)\n    predictions = []\n    current_input = input_data.copy()\n    for _ in range(steps):\n        # 预测下一个时间步",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "documentation": {}
    },
    {
        "label": "process_forecast",
        "kind": 2,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "peekOfCode": "def process_forecast(args):\n    \"\"\"\n    处理单个起始点和预测长度的预测任务。\n    \"\"\"\n    (model_path, start_index, X_test, y_test, time_step, pred_length) = args\n    initial_input = X_test[start_index].reshape(1, time_step, 1)\n    y_test_actual_segment = y_test[start_index : start_index + pred_length]\n    if len(y_test_actual_segment) < pred_length:\n        # 如果实际数据不足，返回高误差\n        return {\"pred_length\": pred_length, \"mse\": float(\"inf\")}",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "documentation": {}
    },
    {
        "label": "select_random_start_indices",
        "kind": 2,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "peekOfCode": "def select_random_start_indices(total_length, N, time_step, max_steps):\n    \"\"\"\n    随机选择多个起始索引，确保每个起始点后有足够的步数进行预测。\n    \"\"\"\n    available_length = total_length - time_step - max_steps\n    if available_length <= 0:\n        raise ValueError(\"测试集长度不足以进行所需的预测步数。\")\n    # 随机选择 N 个起始点\n    start_indices = random.sample(range(time_step, available_length), N)\n    return start_indices",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "documentation": {}
    },
    {
        "label": "run_multiprocessing_forecast",
        "kind": 2,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "peekOfCode": "def run_multiprocessing_forecast(\n    model_path, start_indices, X_test, y_test, time_step, pred_length\n):\n    \"\"\"\n    使用多进程进行预测，并返回所有结果。\n    \"\"\"\n    # 准备参数列表\n    args_list = [\n        (model_path, idx, X_test, y_test, time_step, pred_length)\n        for idx in start_indices",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "documentation": {}
    },
    {
        "label": "compute_variance_over_time",
        "kind": 2,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "peekOfCode": "def compute_variance_over_time(\n    model_path, X_test, y_test, time_step, N, max_pred_length\n):\n    \"\"\"\n    计算不同预测长度下预测误差的均值。\n    \"\"\"\n    # 随机选择 N 个起始点\n    start_indices = select_random_start_indices(\n        len(X_test), N, time_step, max_pred_length\n    )",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "peekOfCode": "def main():\n    import pandas as pd\n    from sklearn.preprocessing import StandardScaler\n    from tensorflow.keras.models import Sequential\n    from tensorflow.keras.layers import LSTM, Dense\n    # 加载测试数据\n    X_test = np.load(\"X_test.npy\")\n    y_test = np.load(\"y_test.npy\")\n    time_step = 24  # 假设时间步为24小时\n    N = 100  # 随机选择20个起始点",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "documentation": {}
    },
    {
        "label": "plt.rcParams[\"font.sans-serif\"]",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "peekOfCode": "plt.rcParams[\"font.sans-serif\"] = [\"SimHei\"]  # 使用 SimHei 字体显示中文\nplt.rcParams[\"axes.unicode_minus\"] = False  # 正确显示负号\n# 定义滚动预测函数\ndef recursive_forecast(model_path, input_data, steps):\n    \"\"\"\n    使用保存的模型进行滚动预测。\n    \"\"\"\n    # 加载模型\n    model = load_model(model_path)\n    predictions = []",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "documentation": {}
    },
    {
        "label": "plt.rcParams[\"axes.unicode_minus\"]",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "peekOfCode": "plt.rcParams[\"axes.unicode_minus\"] = False  # 正确显示负号\n# 定义滚动预测函数\ndef recursive_forecast(model_path, input_data, steps):\n    \"\"\"\n    使用保存的模型进行滚动预测。\n    \"\"\"\n    # 加载模型\n    model = load_model(model_path)\n    predictions = []\n    current_input = input_data.copy()",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM-Time",
        "documentation": {}
    },
    {
        "label": "recursive_forecast",
        "kind": 2,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "peekOfCode": "def recursive_forecast(model_path, input_data, steps):\n    \"\"\"\n    使用保存的模型进行滚动预测。\n    \"\"\"\n    # 加载模型\n    model = load_model(model_path)\n    predictions = []\n    current_input = input_data.copy()\n    for _ in range(steps):\n        # 预测下一个时间步",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "documentation": {}
    },
    {
        "label": "process_starting_point",
        "kind": 2,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "peekOfCode": "def process_starting_point(args):\n    \"\"\"\n    处理单个起始点的预测任务。\n    \"\"\"\n    (model_path, start_index, X_test, y_test, time_step, day_length, week_length) = args\n    initial_input = X_test[start_index].reshape(1, time_step, 1)\n    y_test_actual_segment = y_test[start_index:]\n    # 预测一天的数据\n    day_predict = recursive_forecast(model_path, initial_input, day_length)\n    day_actual = y_test_actual_segment[:day_length]",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "documentation": {}
    },
    {
        "label": "select_start_indices",
        "kind": 2,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "peekOfCode": "def select_start_indices(total_length, N, time_step, max_steps):\n    \"\"\"\n    选择多个起始索引，确保每个起始点后有足够的步数进行预测。\n    \"\"\"\n    available_length = total_length - time_step - max_steps\n    if available_length <= 0:\n        raise ValueError(\"测试集长度不足以进行所需的预测步数。\")\n    start_indices = np.linspace(time_step, available_length, N).astype(int)\n    return start_indices\n# 定义多进程预测函数",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "documentation": {}
    },
    {
        "label": "run_multiprocessing",
        "kind": 2,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "peekOfCode": "def run_multiprocessing(\n    model_path, start_indices, X_test, y_test, time_step, day_length, week_length\n):\n    \"\"\"\n    使用多进程进行预测，并返回所有结果。\n    \"\"\"\n    # 准备参数列表\n    args_list = [\n        (model_path, idx, X_test, y_test, time_step, day_length, week_length)\n        for idx in start_indices",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "peekOfCode": "def main():\n    import pandas as pd\n    from sklearn.preprocessing import StandardScaler\n    from tensorflow.keras.models import Sequential\n    from tensorflow.keras.layers import LSTM, Dense\n    # 数据预处理和模型训练部分（假设之前已经完成并保存了模型）\n    # 如果需要重新训练模型，可以在这里添加代码\n    # 加载测试数据（假设在运行该脚本前已经处理好）\n    # 这里假设 X_test 和 y_test 已经保存为 .npy 文件\n    # 你需要根据实际情况调整数据加载方式",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "documentation": {}
    },
    {
        "label": "plt.rcParams[\"font.sans-serif\"]",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "peekOfCode": "plt.rcParams[\"font.sans-serif\"] = [\"SimHei\"]  # 使用 SimHei 字体显示中文\nplt.rcParams[\"axes.unicode_minus\"] = False  # 正确显示负号\n# 定义滚动预测函数\ndef recursive_forecast(model_path, input_data, steps):\n    \"\"\"\n    使用保存的模型进行滚动预测。\n    \"\"\"\n    # 加载模型\n    model = load_model(model_path)\n    predictions = []",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "documentation": {}
    },
    {
        "label": "plt.rcParams[\"axes.unicode_minus\"]",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "description": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "peekOfCode": "plt.rcParams[\"axes.unicode_minus\"] = False  # 正确显示负号\n# 定义滚动预测函数\ndef recursive_forecast(model_path, input_data, steps):\n    \"\"\"\n    使用保存的模型进行滚动预测。\n    \"\"\"\n    # 加载模型\n    model = load_model(model_path)\n    predictions = []\n    current_input = input_data.copy()",
        "detail": "数据挖掘大作业.代码.数据挖掘.分类.forcast-LSTM",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "description": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "peekOfCode": "df = pd.read_csv(\"weatherHistory.csv\", encoding='ISO-8859-1')\n# 选择聚类和分类的特征\nfeatures = df[['Temperature (C)', 'Humidity', 'Wind Speed (km/h)']]\n# 对数据进行采样\nsampled_df = features.sample(frac=0.2, random_state=42)  # 采样10%的数据\n# 使用肘部法确定K值\ninertia = []\nK_range = range(1, 11)\nfor k in K_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10, max_iter=300)",
        "detail": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "documentation": {}
    },
    {
        "label": "features",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "description": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "peekOfCode": "features = df[['Temperature (C)', 'Humidity', 'Wind Speed (km/h)']]\n# 对数据进行采样\nsampled_df = features.sample(frac=0.2, random_state=42)  # 采样10%的数据\n# 使用肘部法确定K值\ninertia = []\nK_range = range(1, 11)\nfor k in K_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10, max_iter=300)\n    kmeans.fit(sampled_df)\n    inertia.append(kmeans.inertia_)",
        "detail": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "documentation": {}
    },
    {
        "label": "sampled_df",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "description": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "peekOfCode": "sampled_df = features.sample(frac=0.2, random_state=42)  # 采样10%的数据\n# 使用肘部法确定K值\ninertia = []\nK_range = range(1, 11)\nfor k in K_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10, max_iter=300)\n    kmeans.fit(sampled_df)\n    inertia.append(kmeans.inertia_)\n# 绘制肘部法图表\nplt.figure(figsize=(8, 4))",
        "detail": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "documentation": {}
    },
    {
        "label": "inertia",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "description": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "peekOfCode": "inertia = []\nK_range = range(1, 11)\nfor k in K_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10, max_iter=300)\n    kmeans.fit(sampled_df)\n    inertia.append(kmeans.inertia_)\n# 绘制肘部法图表\nplt.figure(figsize=(8, 4))\nplt.plot(K_range, inertia, 'bx-')\nplt.xticks(K_range)",
        "detail": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "documentation": {}
    },
    {
        "label": "K_range",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "description": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "peekOfCode": "K_range = range(1, 11)\nfor k in K_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10, max_iter=300)\n    kmeans.fit(sampled_df)\n    inertia.append(kmeans.inertia_)\n# 绘制肘部法图表\nplt.figure(figsize=(8, 4))\nplt.plot(K_range, inertia, 'bx-')\nplt.xticks(K_range)\nplt.xlabel('Number of clusters')",
        "detail": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "documentation": {}
    },
    {
        "label": "optimal_k",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "description": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "peekOfCode": "optimal_k = 3  # 通过肘部法或其他方法确定K值\nkmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10, max_iter=300)\nclusters = kmeans.fit_predict(sampled_df)\n# 添加聚类结果到采样数据框\nsampled_df['Cluster'] = clusters\n# 可视化聚类结果\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111, projection='3d')\nscatter = ax.scatter(sampled_df['Temperature (C)'], sampled_df['Humidity'], sampled_df['Wind Speed (km/h)'], c=sampled_df['Cluster'], cmap='viridis', alpha=0.5)\nax.set_xlabel('Temperature (C)')",
        "detail": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "documentation": {}
    },
    {
        "label": "kmeans",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "description": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "peekOfCode": "kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10, max_iter=300)\nclusters = kmeans.fit_predict(sampled_df)\n# 添加聚类结果到采样数据框\nsampled_df['Cluster'] = clusters\n# 可视化聚类结果\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111, projection='3d')\nscatter = ax.scatter(sampled_df['Temperature (C)'], sampled_df['Humidity'], sampled_df['Wind Speed (km/h)'], c=sampled_df['Cluster'], cmap='viridis', alpha=0.5)\nax.set_xlabel('Temperature (C)')\nax.set_ylabel('Humidity')",
        "detail": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "documentation": {}
    },
    {
        "label": "clusters",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "description": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "peekOfCode": "clusters = kmeans.fit_predict(sampled_df)\n# 添加聚类结果到采样数据框\nsampled_df['Cluster'] = clusters\n# 可视化聚类结果\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111, projection='3d')\nscatter = ax.scatter(sampled_df['Temperature (C)'], sampled_df['Humidity'], sampled_df['Wind Speed (km/h)'], c=sampled_df['Cluster'], cmap='viridis', alpha=0.5)\nax.set_xlabel('Temperature (C)')\nax.set_ylabel('Humidity')\nax.set_zlabel('Wind Speed (km/h)')",
        "detail": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "documentation": {}
    },
    {
        "label": "sampled_df['Cluster']",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "description": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "peekOfCode": "sampled_df['Cluster'] = clusters\n# 可视化聚类结果\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111, projection='3d')\nscatter = ax.scatter(sampled_df['Temperature (C)'], sampled_df['Humidity'], sampled_df['Wind Speed (km/h)'], c=sampled_df['Cluster'], cmap='viridis', alpha=0.5)\nax.set_xlabel('Temperature (C)')\nax.set_ylabel('Humidity')\nax.set_zlabel('Wind Speed (km/h)')\nax.set_title('3D Clusters of Weather Data')\nlegend1 = ax.legend(*scatter.legend_elements(), title=\"Clusters\")",
        "detail": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "description": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "peekOfCode": "fig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111, projection='3d')\nscatter = ax.scatter(sampled_df['Temperature (C)'], sampled_df['Humidity'], sampled_df['Wind Speed (km/h)'], c=sampled_df['Cluster'], cmap='viridis', alpha=0.5)\nax.set_xlabel('Temperature (C)')\nax.set_ylabel('Humidity')\nax.set_zlabel('Wind Speed (km/h)')\nax.set_title('3D Clusters of Weather Data')\nlegend1 = ax.legend(*scatter.legend_elements(), title=\"Clusters\")\nax.add_artist(legend1)\nplt.show()",
        "detail": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "description": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "peekOfCode": "ax = fig.add_subplot(111, projection='3d')\nscatter = ax.scatter(sampled_df['Temperature (C)'], sampled_df['Humidity'], sampled_df['Wind Speed (km/h)'], c=sampled_df['Cluster'], cmap='viridis', alpha=0.5)\nax.set_xlabel('Temperature (C)')\nax.set_ylabel('Humidity')\nax.set_zlabel('Wind Speed (km/h)')\nax.set_title('3D Clusters of Weather Data')\nlegend1 = ax.legend(*scatter.legend_elements(), title=\"Clusters\")\nax.add_artist(legend1)\nplt.show()",
        "detail": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "documentation": {}
    },
    {
        "label": "scatter",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "description": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "peekOfCode": "scatter = ax.scatter(sampled_df['Temperature (C)'], sampled_df['Humidity'], sampled_df['Wind Speed (km/h)'], c=sampled_df['Cluster'], cmap='viridis', alpha=0.5)\nax.set_xlabel('Temperature (C)')\nax.set_ylabel('Humidity')\nax.set_zlabel('Wind Speed (km/h)')\nax.set_title('3D Clusters of Weather Data')\nlegend1 = ax.legend(*scatter.legend_elements(), title=\"Clusters\")\nax.add_artist(legend1)\nplt.show()",
        "detail": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "documentation": {}
    },
    {
        "label": "legend1",
        "kind": 5,
        "importPath": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "description": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "peekOfCode": "legend1 = ax.legend(*scatter.legend_elements(), title=\"Clusters\")\nax.add_artist(legend1)\nplt.show()",
        "detail": "数据挖掘大作业.代码.数据挖掘.聚类.聚类",
        "documentation": {}
    },
    {
        "label": "athletes_data_path",
        "kind": 5,
        "importPath": "programs",
        "description": "programs",
        "peekOfCode": "athletes_data_path = \"2025_Problem_C_Data\\summerOly_athletes.csv\"\nmedal_counts_data_path = \"2025_Problem_C_Data\\summerOly_medal_counts.csv\"\n# 加载运动员数据\nathletes_data = pd.read_csv(athletes_data_path)\nmedal_counts_data = pd.read_csv(medal_counts_data_path)\n# 数据清洗：只保留有奖牌的数据\nathletes_data = athletes_data[athletes_data[\"Medal\"].notnull()]\n# 按项目和国家统计奖牌数\nproject_medals = athletes_data.groupby([\"Sport\", \"NOC\"])[\"Medal\"].count().reset_index()\nproject_medals.rename(columns={\"Medal\": \"MedalCount\"}, inplace=True)",
        "detail": "programs",
        "documentation": {}
    },
    {
        "label": "medal_counts_data_path",
        "kind": 5,
        "importPath": "programs",
        "description": "programs",
        "peekOfCode": "medal_counts_data_path = \"2025_Problem_C_Data\\summerOly_medal_counts.csv\"\n# 加载运动员数据\nathletes_data = pd.read_csv(athletes_data_path)\nmedal_counts_data = pd.read_csv(medal_counts_data_path)\n# 数据清洗：只保留有奖牌的数据\nathletes_data = athletes_data[athletes_data[\"Medal\"].notnull()]\n# 按项目和国家统计奖牌数\nproject_medals = athletes_data.groupby([\"Sport\", \"NOC\"])[\"Medal\"].count().reset_index()\nproject_medals.rename(columns={\"Medal\": \"MedalCount\"}, inplace=True)\n# 计算每个项目的总奖牌数",
        "detail": "programs",
        "documentation": {}
    },
    {
        "label": "athletes_data",
        "kind": 5,
        "importPath": "programs",
        "description": "programs",
        "peekOfCode": "athletes_data = pd.read_csv(athletes_data_path)\nmedal_counts_data = pd.read_csv(medal_counts_data_path)\n# 数据清洗：只保留有奖牌的数据\nathletes_data = athletes_data[athletes_data[\"Medal\"].notnull()]\n# 按项目和国家统计奖牌数\nproject_medals = athletes_data.groupby([\"Sport\", \"NOC\"])[\"Medal\"].count().reset_index()\nproject_medals.rename(columns={\"Medal\": \"MedalCount\"}, inplace=True)\n# 计算每个项目的总奖牌数\nproject_totals = project_medals.groupby(\"Sport\")[\"MedalCount\"].sum().reset_index()\nproject_totals.rename(columns={\"MedalCount\": \"TotalMedals\"}, inplace=True)",
        "detail": "programs",
        "documentation": {}
    },
    {
        "label": "medal_counts_data",
        "kind": 5,
        "importPath": "programs",
        "description": "programs",
        "peekOfCode": "medal_counts_data = pd.read_csv(medal_counts_data_path)\n# 数据清洗：只保留有奖牌的数据\nathletes_data = athletes_data[athletes_data[\"Medal\"].notnull()]\n# 按项目和国家统计奖牌数\nproject_medals = athletes_data.groupby([\"Sport\", \"NOC\"])[\"Medal\"].count().reset_index()\nproject_medals.rename(columns={\"Medal\": \"MedalCount\"}, inplace=True)\n# 计算每个项目的总奖牌数\nproject_totals = project_medals.groupby(\"Sport\")[\"MedalCount\"].sum().reset_index()\nproject_totals.rename(columns={\"MedalCount\": \"TotalMedals\"}, inplace=True)\n# 合并总奖牌数以计算占比",
        "detail": "programs",
        "documentation": {}
    },
    {
        "label": "athletes_data",
        "kind": 5,
        "importPath": "programs",
        "description": "programs",
        "peekOfCode": "athletes_data = athletes_data[athletes_data[\"Medal\"].notnull()]\n# 按项目和国家统计奖牌数\nproject_medals = athletes_data.groupby([\"Sport\", \"NOC\"])[\"Medal\"].count().reset_index()\nproject_medals.rename(columns={\"Medal\": \"MedalCount\"}, inplace=True)\n# 计算每个项目的总奖牌数\nproject_totals = project_medals.groupby(\"Sport\")[\"MedalCount\"].sum().reset_index()\nproject_totals.rename(columns={\"MedalCount\": \"TotalMedals\"}, inplace=True)\n# 合并总奖牌数以计算占比\nproject_medals = project_medals.merge(project_totals, on=\"Sport\")\nproject_medals[\"MedalPercentage\"] = (",
        "detail": "programs",
        "documentation": {}
    },
    {
        "label": "project_medals",
        "kind": 5,
        "importPath": "programs",
        "description": "programs",
        "peekOfCode": "project_medals = athletes_data.groupby([\"Sport\", \"NOC\"])[\"Medal\"].count().reset_index()\nproject_medals.rename(columns={\"Medal\": \"MedalCount\"}, inplace=True)\n# 计算每个项目的总奖牌数\nproject_totals = project_medals.groupby(\"Sport\")[\"MedalCount\"].sum().reset_index()\nproject_totals.rename(columns={\"MedalCount\": \"TotalMedals\"}, inplace=True)\n# 合并总奖牌数以计算占比\nproject_medals = project_medals.merge(project_totals, on=\"Sport\")\nproject_medals[\"MedalPercentage\"] = (\n    project_medals[\"MedalCount\"] / project_medals[\"TotalMedals\"]\n)",
        "detail": "programs",
        "documentation": {}
    },
    {
        "label": "project_totals",
        "kind": 5,
        "importPath": "programs",
        "description": "programs",
        "peekOfCode": "project_totals = project_medals.groupby(\"Sport\")[\"MedalCount\"].sum().reset_index()\nproject_totals.rename(columns={\"MedalCount\": \"TotalMedals\"}, inplace=True)\n# 合并总奖牌数以计算占比\nproject_medals = project_medals.merge(project_totals, on=\"Sport\")\nproject_medals[\"MedalPercentage\"] = (\n    project_medals[\"MedalCount\"] / project_medals[\"TotalMedals\"]\n)\n# 1. 识别主导国家\ndominant_projects = project_medals.loc[\n    project_medals.groupby(\"Sport\")[\"MedalCount\"].idxmax()",
        "detail": "programs",
        "documentation": {}
    },
    {
        "label": "project_medals",
        "kind": 5,
        "importPath": "programs",
        "description": "programs",
        "peekOfCode": "project_medals = project_medals.merge(project_totals, on=\"Sport\")\nproject_medals[\"MedalPercentage\"] = (\n    project_medals[\"MedalCount\"] / project_medals[\"TotalMedals\"]\n)\n# 1. 识别主导国家\ndominant_projects = project_medals.loc[\n    project_medals.groupby(\"Sport\")[\"MedalCount\"].idxmax()\n]\ndominant_projects = dominant_projects[[\"Sport\", \"NOC\", \"MedalCount\", \"MedalPercentage\"]]\ndominant_projects.rename(columns={\"NOC\": \"DominantCountry\"}, inplace=True)",
        "detail": "programs",
        "documentation": {}
    },
    {
        "label": "project_medals[\"MedalPercentage\"]",
        "kind": 5,
        "importPath": "programs",
        "description": "programs",
        "peekOfCode": "project_medals[\"MedalPercentage\"] = (\n    project_medals[\"MedalCount\"] / project_medals[\"TotalMedals\"]\n)\n# 1. 识别主导国家\ndominant_projects = project_medals.loc[\n    project_medals.groupby(\"Sport\")[\"MedalCount\"].idxmax()\n]\ndominant_projects = dominant_projects[[\"Sport\", \"NOC\", \"MedalCount\", \"MedalPercentage\"]]\ndominant_projects.rename(columns={\"NOC\": \"DominantCountry\"}, inplace=True)\n# 2. 计算竞争激烈的项目（衡量奖牌分布均匀性，标准差越小竞争越激烈）",
        "detail": "programs",
        "documentation": {}
    },
    {
        "label": "dominant_projects",
        "kind": 5,
        "importPath": "programs",
        "description": "programs",
        "peekOfCode": "dominant_projects = project_medals.loc[\n    project_medals.groupby(\"Sport\")[\"MedalCount\"].idxmax()\n]\ndominant_projects = dominant_projects[[\"Sport\", \"NOC\", \"MedalCount\", \"MedalPercentage\"]]\ndominant_projects.rename(columns={\"NOC\": \"DominantCountry\"}, inplace=True)\n# 2. 计算竞争激烈的项目（衡量奖牌分布均匀性，标准差越小竞争越激烈）\ncompetition_stats = (\n    project_medals.groupby(\"Sport\")[\"MedalPercentage\"].std().reset_index()\n)\ncompetition_stats.rename(",
        "detail": "programs",
        "documentation": {}
    },
    {
        "label": "dominant_projects",
        "kind": 5,
        "importPath": "programs",
        "description": "programs",
        "peekOfCode": "dominant_projects = dominant_projects[[\"Sport\", \"NOC\", \"MedalCount\", \"MedalPercentage\"]]\ndominant_projects.rename(columns={\"NOC\": \"DominantCountry\"}, inplace=True)\n# 2. 计算竞争激烈的项目（衡量奖牌分布均匀性，标准差越小竞争越激烈）\ncompetition_stats = (\n    project_medals.groupby(\"Sport\")[\"MedalPercentage\"].std().reset_index()\n)\ncompetition_stats.rename(\n    columns={\"MedalPercentage\": \"CompetitionIntensity\"}, inplace=True\n)\n# 合并主导国家和竞争激烈性",
        "detail": "programs",
        "documentation": {}
    },
    {
        "label": "competition_stats",
        "kind": 5,
        "importPath": "programs",
        "description": "programs",
        "peekOfCode": "competition_stats = (\n    project_medals.groupby(\"Sport\")[\"MedalPercentage\"].std().reset_index()\n)\ncompetition_stats.rename(\n    columns={\"MedalPercentage\": \"CompetitionIntensity\"}, inplace=True\n)\n# 合并主导国家和竞争激烈性\nproject_analysis = dominant_projects.merge(competition_stats, on=\"Sport\")\n# 3. 筛选垄断性项目（某国奖牌比例 > 50%）\nmonopolized_projects = project_analysis[project_analysis[\"MedalPercentage\"] > 0.5]",
        "detail": "programs",
        "documentation": {}
    },
    {
        "label": "project_analysis",
        "kind": 5,
        "importPath": "programs",
        "description": "programs",
        "peekOfCode": "project_analysis = dominant_projects.merge(competition_stats, on=\"Sport\")\n# 3. 筛选垄断性项目（某国奖牌比例 > 50%）\nmonopolized_projects = project_analysis[project_analysis[\"MedalPercentage\"] > 0.5]\n# 输出分析结果\nprint(\"主导国家分析：\")\nprint(project_analysis)\nprint(\"\\n竞争激烈性分析（标准差越小越激烈）：\")\nprint(competition_stats)\nprint(\"\\n垄断性项目：\")\nprint(monopolized_projects)",
        "detail": "programs",
        "documentation": {}
    },
    {
        "label": "monopolized_projects",
        "kind": 5,
        "importPath": "programs",
        "description": "programs",
        "peekOfCode": "monopolized_projects = project_analysis[project_analysis[\"MedalPercentage\"] > 0.5]\n# 输出分析结果\nprint(\"主导国家分析：\")\nprint(project_analysis)\nprint(\"\\n竞争激烈性分析（标准差越小越激烈）：\")\nprint(competition_stats)\nprint(\"\\n垄断性项目：\")\nprint(monopolized_projects)\n# 保存结果到文件\nproject_analysis.to_csv(\"project_analysis.csv\", index=False)",
        "detail": "programs",
        "documentation": {}
    }
]